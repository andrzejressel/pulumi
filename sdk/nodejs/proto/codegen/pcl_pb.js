// source: pulumi/codegen/pcl.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = { pulumirpc: { codegen: { }, testing: { } } }, global = proto;

goog.exportSymbol('proto.codegen.Attribute', null, global);
goog.exportSymbol('proto.codegen.Expression', null, global);
goog.exportSymbol('proto.codegen.Expression.ValueCase', null, global);
goog.exportSymbol('proto.codegen.Node', null, global);
goog.exportSymbol('proto.codegen.Node.ValueCase', null, global);
goog.exportSymbol('proto.codegen.ObjectConsItem', null, global);
goog.exportSymbol('proto.codegen.ObjectConstExpression', null, global);
goog.exportSymbol('proto.codegen.Package', null, global);
goog.exportSymbol('proto.codegen.ResourceNode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Package = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.Package.repeatedFields_, null);
};
goog.inherits(proto.codegen.Package, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Package.displayName = 'proto.codegen.Package';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.Node.oneofGroups_);
};
goog.inherits(proto.codegen.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Node.displayName = 'proto.codegen.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ResourceNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.ResourceNode.repeatedFields_, null);
};
goog.inherits(proto.codegen.ResourceNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ResourceNode.displayName = 'proto.codegen.ResourceNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Attribute.displayName = 'proto.codegen.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.Expression.oneofGroups_);
};
goog.inherits(proto.codegen.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Expression.displayName = 'proto.codegen.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ObjectConstExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.ObjectConstExpression.repeatedFields_, null);
};
goog.inherits(proto.codegen.ObjectConstExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ObjectConstExpression.displayName = 'proto.codegen.ObjectConstExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ObjectConsItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ObjectConsItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ObjectConsItem.displayName = 'proto.codegen.ObjectConsItem';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.Package.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Package.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Package.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Package} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Package.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.codegen.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Package}
 */
proto.codegen.Package.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Package;
  return proto.codegen.Package.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Package} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Package}
 */
proto.codegen.Package.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Node;
      reader.readMessage(value,proto.codegen.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Package.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Package.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Package} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Package.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.codegen.Node>}
 */
proto.codegen.Package.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.codegen.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Node, 1));
};


/**
 * @param {!Array<!proto.codegen.Node>} value
 * @return {!proto.codegen.Package} returns this
*/
proto.codegen.Package.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Node}
 */
proto.codegen.Package.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.Package} returns this
 */
proto.codegen.Package.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.Node.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.codegen.Node.ValueCase = {
  VALUE_NOT_SET: 0,
  RESOURCE: 1
};

/**
 * @return {proto.codegen.Node.ValueCase}
 */
proto.codegen.Node.prototype.getValueCase = function() {
  return /** @type {proto.codegen.Node.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && proto.codegen.ResourceNode.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Node}
 */
proto.codegen.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Node;
  return proto.codegen.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Node}
 */
proto.codegen.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.ResourceNode;
      reader.readMessage(value,proto.codegen.ResourceNode.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.ResourceNode.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResourceNode resource = 1;
 * @return {?proto.codegen.ResourceNode}
 */
proto.codegen.Node.prototype.getResource = function() {
  return /** @type{?proto.codegen.ResourceNode} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ResourceNode, 1));
};


/**
 * @param {?proto.codegen.ResourceNode|undefined} value
 * @return {!proto.codegen.Node} returns this
*/
proto.codegen.Node.prototype.setResource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.codegen.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Node} returns this
 */
proto.codegen.Node.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Node.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.ResourceNode.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ResourceNode.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ResourceNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ResourceNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.codegen.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ResourceNode}
 */
proto.codegen.ResourceNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ResourceNode;
  return proto.codegen.ResourceNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ResourceNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ResourceNode}
 */
proto.codegen.ResourceNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Attribute;
      reader.readMessage(value,proto.codegen.Attribute.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ResourceNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ResourceNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ResourceNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Attribute inputs = 1;
 * @return {!Array<!proto.codegen.Attribute>}
 */
proto.codegen.ResourceNode.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.codegen.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Attribute, 1));
};


/**
 * @param {!Array<!proto.codegen.Attribute>} value
 * @return {!proto.codegen.ResourceNode} returns this
*/
proto.codegen.ResourceNode.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Attribute}
 */
proto.codegen.ResourceNode.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.ResourceNode} returns this
 */
proto.codegen.ResourceNode.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Attribute}
 */
proto.codegen.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Attribute;
  return proto.codegen.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Attribute}
 */
proto.codegen.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.Attribute} returns this
 */
proto.codegen.Attribute.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Expression value = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.Attribute.prototype.getValue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.Attribute} returns this
*/
proto.codegen.Attribute.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Attribute} returns this
 */
proto.codegen.Attribute.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Attribute.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.Expression.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.codegen.Expression.ValueCase = {
  VALUE_NOT_SET: 0,
  CONSTNUMBER: 1,
  CONSTSTRING: 2
};

/**
 * @return {proto.codegen.Expression.ValueCase}
 */
proto.codegen.Expression.prototype.getValueCase = function() {
  return /** @type {proto.codegen.Expression.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    constnumber: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    conststring: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Expression}
 */
proto.codegen.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Expression;
  return proto.codegen.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Expression}
 */
proto.codegen.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConstnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConststring(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional float constNumber = 1;
 * @return {number}
 */
proto.codegen.Expression.prototype.getConstnumber = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.setConstnumber = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearConstnumber = function() {
  return jspb.Message.setOneofField(this, 1, proto.codegen.Expression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasConstnumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string constString = 2;
 * @return {string}
 */
proto.codegen.Expression.prototype.getConststring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.setConststring = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearConststring = function() {
  return jspb.Message.setOneofField(this, 2, proto.codegen.Expression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasConststring = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.ObjectConstExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ObjectConstExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ObjectConstExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ObjectConstExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConstExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.codegen.ObjectConsItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ObjectConstExpression}
 */
proto.codegen.ObjectConstExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ObjectConstExpression;
  return proto.codegen.ObjectConstExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ObjectConstExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ObjectConstExpression}
 */
proto.codegen.ObjectConstExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.ObjectConsItem;
      reader.readMessage(value,proto.codegen.ObjectConsItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ObjectConstExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ObjectConstExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ObjectConstExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConstExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.ObjectConsItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectConsItem items = 1;
 * @return {!Array<!proto.codegen.ObjectConsItem>}
 */
proto.codegen.ObjectConstExpression.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.codegen.ObjectConsItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.ObjectConsItem, 1));
};


/**
 * @param {!Array<!proto.codegen.ObjectConsItem>} value
 * @return {!proto.codegen.ObjectConstExpression} returns this
*/
proto.codegen.ObjectConstExpression.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.ObjectConsItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.ObjectConsItem}
 */
proto.codegen.ObjectConstExpression.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.ObjectConsItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.ObjectConstExpression} returns this
 */
proto.codegen.ObjectConstExpression.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ObjectConsItem.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ObjectConsItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ObjectConsItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConsItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.codegen.Expression.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ObjectConsItem}
 */
proto.codegen.ObjectConsItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ObjectConsItem;
  return proto.codegen.ObjectConsItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ObjectConsItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ObjectConsItem}
 */
proto.codegen.ObjectConsItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ObjectConsItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ObjectConsItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ObjectConsItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConsItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression key = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ObjectConsItem.prototype.getKey = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ObjectConsItem} returns this
*/
proto.codegen.ObjectConsItem.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ObjectConsItem} returns this
 */
proto.codegen.ObjectConsItem.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ObjectConsItem.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression value = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ObjectConsItem.prototype.getValue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ObjectConsItem} returns this
*/
proto.codegen.ObjectConsItem.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ObjectConsItem} returns this
 */
proto.codegen.ObjectConsItem.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ObjectConsItem.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.codegen);
