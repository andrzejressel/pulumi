// source: pulumi/codegen/pcl.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = { pulumirpc: { codegen: { }, testing: { } } }, global = proto;

goog.exportSymbol('proto.codegen.AnonymousFunctionExpression', null, global);
goog.exportSymbol('proto.codegen.BinaryOpExpression', null, global);
goog.exportSymbol('proto.codegen.ConditionalExpression', null, global);
goog.exportSymbol('proto.codegen.ConfigType', null, global);
goog.exportSymbol('proto.codegen.ConfigVariable', null, global);
goog.exportSymbol('proto.codegen.Expression', null, global);
goog.exportSymbol('proto.codegen.Expression.ValueCase', null, global);
goog.exportSymbol('proto.codegen.FunctionCallExpression', null, global);
goog.exportSymbol('proto.codegen.IndexExpression', null, global);
goog.exportSymbol('proto.codegen.LiteralValueExpression', null, global);
goog.exportSymbol('proto.codegen.LiteralValueExpression.ValueCase', null, global);
goog.exportSymbol('proto.codegen.LocalVariable', null, global);
goog.exportSymbol('proto.codegen.Node', null, global);
goog.exportSymbol('proto.codegen.Node.ValueCase', null, global);
goog.exportSymbol('proto.codegen.ObjectConsExpression', null, global);
goog.exportSymbol('proto.codegen.Operation', null, global);
goog.exportSymbol('proto.codegen.OutputVariable', null, global);
goog.exportSymbol('proto.codegen.PclProtobufProgram', null, global);
goog.exportSymbol('proto.codegen.PluginReference', null, global);
goog.exportSymbol('proto.codegen.RelativeTraversalExpression', null, global);
goog.exportSymbol('proto.codegen.Resource', null, global);
goog.exportSymbol('proto.codegen.ResourceInput', null, global);
goog.exportSymbol('proto.codegen.ResourceOptions', null, global);
goog.exportSymbol('proto.codegen.ScopeTraversalExpression', null, global);
goog.exportSymbol('proto.codegen.TemplateExpression', null, global);
goog.exportSymbol('proto.codegen.Traversal', null, global);
goog.exportSymbol('proto.codegen.TraverseAttr', null, global);
goog.exportSymbol('proto.codegen.TraverseIndex', null, global);
goog.exportSymbol('proto.codegen.TraverseIndex.ValueCase', null, global);
goog.exportSymbol('proto.codegen.TraverseRoot', null, global);
goog.exportSymbol('proto.codegen.TraverseSplat', null, global);
goog.exportSymbol('proto.codegen.Traverser', null, global);
goog.exportSymbol('proto.codegen.Traverser.ValueCase', null, global);
goog.exportSymbol('proto.codegen.TupleConsExpression', null, global);
goog.exportSymbol('proto.codegen.UnaryOpExpression', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.PclProtobufProgram = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.PclProtobufProgram.repeatedFields_, null);
};
goog.inherits(proto.codegen.PclProtobufProgram, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.PclProtobufProgram.displayName = 'proto.codegen.PclProtobufProgram';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.PluginReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.PluginReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.PluginReference.displayName = 'proto.codegen.PluginReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.Node.oneofGroups_);
};
goog.inherits(proto.codegen.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Node.displayName = 'proto.codegen.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.Resource.repeatedFields_, null);
};
goog.inherits(proto.codegen.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Resource.displayName = 'proto.codegen.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ResourceInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ResourceInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ResourceInput.displayName = 'proto.codegen.ResourceInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ResourceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ResourceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ResourceOptions.displayName = 'proto.codegen.ResourceOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.LocalVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.LocalVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.LocalVariable.displayName = 'proto.codegen.LocalVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ConfigVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ConfigVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ConfigVariable.displayName = 'proto.codegen.ConfigVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.OutputVariable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.OutputVariable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.OutputVariable.displayName = 'proto.codegen.OutputVariable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.Expression.oneofGroups_);
};
goog.inherits(proto.codegen.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Expression.displayName = 'proto.codegen.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.LiteralValueExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.LiteralValueExpression.oneofGroups_);
};
goog.inherits(proto.codegen.LiteralValueExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.LiteralValueExpression.displayName = 'proto.codegen.LiteralValueExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TemplateExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.TemplateExpression.repeatedFields_, null);
};
goog.inherits(proto.codegen.TemplateExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TemplateExpression.displayName = 'proto.codegen.TemplateExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.IndexExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.IndexExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.IndexExpression.displayName = 'proto.codegen.IndexExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ObjectConsExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ObjectConsExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ObjectConsExpression.displayName = 'proto.codegen.ObjectConsExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TupleConsExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.TupleConsExpression.repeatedFields_, null);
};
goog.inherits(proto.codegen.TupleConsExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TupleConsExpression.displayName = 'proto.codegen.TupleConsExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.FunctionCallExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.FunctionCallExpression.repeatedFields_, null);
};
goog.inherits(proto.codegen.FunctionCallExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.FunctionCallExpression.displayName = 'proto.codegen.FunctionCallExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.RelativeTraversalExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.RelativeTraversalExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.RelativeTraversalExpression.displayName = 'proto.codegen.RelativeTraversalExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ScopeTraversalExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ScopeTraversalExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ScopeTraversalExpression.displayName = 'proto.codegen.ScopeTraversalExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.AnonymousFunctionExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.AnonymousFunctionExpression.repeatedFields_, null);
};
goog.inherits(proto.codegen.AnonymousFunctionExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.AnonymousFunctionExpression.displayName = 'proto.codegen.AnonymousFunctionExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.ConditionalExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.ConditionalExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.ConditionalExpression.displayName = 'proto.codegen.ConditionalExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.BinaryOpExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.BinaryOpExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.BinaryOpExpression.displayName = 'proto.codegen.BinaryOpExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.UnaryOpExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.UnaryOpExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.UnaryOpExpression.displayName = 'proto.codegen.UnaryOpExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Traversal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.codegen.Traversal.repeatedFields_, null);
};
goog.inherits(proto.codegen.Traversal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Traversal.displayName = 'proto.codegen.Traversal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.Traverser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.Traverser.oneofGroups_);
};
goog.inherits(proto.codegen.Traverser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.Traverser.displayName = 'proto.codegen.Traverser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TraverseAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.TraverseAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TraverseAttr.displayName = 'proto.codegen.TraverseAttr';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TraverseIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.codegen.TraverseIndex.oneofGroups_);
};
goog.inherits(proto.codegen.TraverseIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TraverseIndex.displayName = 'proto.codegen.TraverseIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TraverseRoot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.TraverseRoot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TraverseRoot.displayName = 'proto.codegen.TraverseRoot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.codegen.TraverseSplat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.codegen.TraverseSplat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.codegen.TraverseSplat.displayName = 'proto.codegen.TraverseSplat';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.PclProtobufProgram.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.PclProtobufProgram.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.PclProtobufProgram.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.PclProtobufProgram} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.PclProtobufProgram.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.codegen.Node.toObject, includeInstance),
    pluginsList: jspb.Message.toObjectList(msg.getPluginsList(),
    proto.codegen.PluginReference.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.PclProtobufProgram}
 */
proto.codegen.PclProtobufProgram.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.PclProtobufProgram;
  return proto.codegen.PclProtobufProgram.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.PclProtobufProgram} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.PclProtobufProgram}
 */
proto.codegen.PclProtobufProgram.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Node;
      reader.readMessage(value,proto.codegen.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    case 2:
      var value = new proto.codegen.PluginReference;
      reader.readMessage(value,proto.codegen.PluginReference.deserializeBinaryFromReader);
      msg.addPlugins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.PclProtobufProgram.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.PclProtobufProgram.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.PclProtobufProgram} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.PclProtobufProgram.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Node.serializeBinaryToWriter
    );
  }
  f = message.getPluginsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.codegen.PluginReference.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node nodes = 1;
 * @return {!Array<!proto.codegen.Node>}
 */
proto.codegen.PclProtobufProgram.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.codegen.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Node, 1));
};


/**
 * @param {!Array<!proto.codegen.Node>} value
 * @return {!proto.codegen.PclProtobufProgram} returns this
*/
proto.codegen.PclProtobufProgram.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Node}
 */
proto.codegen.PclProtobufProgram.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.PclProtobufProgram} returns this
 */
proto.codegen.PclProtobufProgram.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * repeated PluginReference plugins = 2;
 * @return {!Array<!proto.codegen.PluginReference>}
 */
proto.codegen.PclProtobufProgram.prototype.getPluginsList = function() {
  return /** @type{!Array<!proto.codegen.PluginReference>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.PluginReference, 2));
};


/**
 * @param {!Array<!proto.codegen.PluginReference>} value
 * @return {!proto.codegen.PclProtobufProgram} returns this
*/
proto.codegen.PclProtobufProgram.prototype.setPluginsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.codegen.PluginReference=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.PluginReference}
 */
proto.codegen.PclProtobufProgram.prototype.addPlugins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.codegen.PluginReference, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.PclProtobufProgram} returns this
 */
proto.codegen.PclProtobufProgram.prototype.clearPluginsList = function() {
  return this.setPluginsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.PluginReference.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.PluginReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.PluginReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.PluginReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.PluginReference}
 */
proto.codegen.PluginReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.PluginReference;
  return proto.codegen.PluginReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.PluginReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.PluginReference}
 */
proto.codegen.PluginReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.PluginReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.PluginReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.PluginReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.PluginReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.PluginReference.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.PluginReference} returns this
 */
proto.codegen.PluginReference.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.codegen.PluginReference.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.PluginReference} returns this
 */
proto.codegen.PluginReference.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.Node.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.codegen.Node.ValueCase = {
  VALUE_NOT_SET: 0,
  RESOURCE: 1,
  LOCALVARIABLE: 2,
  CONFIGVARIABLE: 3,
  OUTPUTVARIABLE: 4
};

/**
 * @return {proto.codegen.Node.ValueCase}
 */
proto.codegen.Node.prototype.getValueCase = function() {
  return /** @type {proto.codegen.Node.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.Node.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    resource: (f = msg.getResource()) && proto.codegen.Resource.toObject(includeInstance, f),
    localvariable: (f = msg.getLocalvariable()) && proto.codegen.LocalVariable.toObject(includeInstance, f),
    configvariable: (f = msg.getConfigvariable()) && proto.codegen.ConfigVariable.toObject(includeInstance, f),
    outputvariable: (f = msg.getOutputvariable()) && proto.codegen.OutputVariable.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Node}
 */
proto.codegen.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Node;
  return proto.codegen.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Node}
 */
proto.codegen.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Resource;
      reader.readMessage(value,proto.codegen.Resource.deserializeBinaryFromReader);
      msg.setResource(value);
      break;
    case 2:
      var value = new proto.codegen.LocalVariable;
      reader.readMessage(value,proto.codegen.LocalVariable.deserializeBinaryFromReader);
      msg.setLocalvariable(value);
      break;
    case 3:
      var value = new proto.codegen.ConfigVariable;
      reader.readMessage(value,proto.codegen.ConfigVariable.deserializeBinaryFromReader);
      msg.setConfigvariable(value);
      break;
    case 4:
      var value = new proto.codegen.OutputVariable;
      reader.readMessage(value,proto.codegen.OutputVariable.deserializeBinaryFromReader);
      msg.setOutputvariable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Resource.serializeBinaryToWriter
    );
  }
  f = message.getLocalvariable();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.LocalVariable.serializeBinaryToWriter
    );
  }
  f = message.getConfigvariable();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.ConfigVariable.serializeBinaryToWriter
    );
  }
  f = message.getOutputvariable();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.codegen.OutputVariable.serializeBinaryToWriter
    );
  }
};


/**
 * optional Resource resource = 1;
 * @return {?proto.codegen.Resource}
 */
proto.codegen.Node.prototype.getResource = function() {
  return /** @type{?proto.codegen.Resource} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Resource, 1));
};


/**
 * @param {?proto.codegen.Resource|undefined} value
 * @return {!proto.codegen.Node} returns this
*/
proto.codegen.Node.prototype.setResource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.codegen.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Node} returns this
 */
proto.codegen.Node.prototype.clearResource = function() {
  return this.setResource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Node.prototype.hasResource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LocalVariable localVariable = 2;
 * @return {?proto.codegen.LocalVariable}
 */
proto.codegen.Node.prototype.getLocalvariable = function() {
  return /** @type{?proto.codegen.LocalVariable} */ (
    jspb.Message.getWrapperField(this, proto.codegen.LocalVariable, 2));
};


/**
 * @param {?proto.codegen.LocalVariable|undefined} value
 * @return {!proto.codegen.Node} returns this
*/
proto.codegen.Node.prototype.setLocalvariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.codegen.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Node} returns this
 */
proto.codegen.Node.prototype.clearLocalvariable = function() {
  return this.setLocalvariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Node.prototype.hasLocalvariable = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigVariable configVariable = 3;
 * @return {?proto.codegen.ConfigVariable}
 */
proto.codegen.Node.prototype.getConfigvariable = function() {
  return /** @type{?proto.codegen.ConfigVariable} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ConfigVariable, 3));
};


/**
 * @param {?proto.codegen.ConfigVariable|undefined} value
 * @return {!proto.codegen.Node} returns this
*/
proto.codegen.Node.prototype.setConfigvariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.codegen.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Node} returns this
 */
proto.codegen.Node.prototype.clearConfigvariable = function() {
  return this.setConfigvariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Node.prototype.hasConfigvariable = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OutputVariable outputVariable = 4;
 * @return {?proto.codegen.OutputVariable}
 */
proto.codegen.Node.prototype.getOutputvariable = function() {
  return /** @type{?proto.codegen.OutputVariable} */ (
    jspb.Message.getWrapperField(this, proto.codegen.OutputVariable, 4));
};


/**
 * @param {?proto.codegen.OutputVariable|undefined} value
 * @return {!proto.codegen.Node} returns this
*/
proto.codegen.Node.prototype.setOutputvariable = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.codegen.Node.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Node} returns this
 */
proto.codegen.Node.prototype.clearOutputvariable = function() {
  return this.setOutputvariable(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Node.prototype.hasOutputvariable = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.Resource.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logicalname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.codegen.ResourceInput.toObject, includeInstance),
    options: (f = msg.getOptions()) && proto.codegen.ResourceOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Resource}
 */
proto.codegen.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Resource;
  return proto.codegen.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Resource}
 */
proto.codegen.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = new proto.codegen.ResourceInput;
      reader.readMessage(value,proto.codegen.ResourceInput.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 5:
      var value = new proto.codegen.ResourceOptions;
      reader.readMessage(value,proto.codegen.ResourceOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogicalname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.codegen.ResourceInput.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.codegen.ResourceOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.Resource} returns this
 */
proto.codegen.Resource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logicalName = 2;
 * @return {string}
 */
proto.codegen.Resource.prototype.getLogicalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.Resource} returns this
 */
proto.codegen.Resource.prototype.setLogicalname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.codegen.Resource.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.Resource} returns this
 */
proto.codegen.Resource.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated ResourceInput inputs = 4;
 * @return {!Array<!proto.codegen.ResourceInput>}
 */
proto.codegen.Resource.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.codegen.ResourceInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.ResourceInput, 4));
};


/**
 * @param {!Array<!proto.codegen.ResourceInput>} value
 * @return {!proto.codegen.Resource} returns this
*/
proto.codegen.Resource.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.codegen.ResourceInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.ResourceInput}
 */
proto.codegen.Resource.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.codegen.ResourceInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.Resource} returns this
 */
proto.codegen.Resource.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};


/**
 * optional ResourceOptions options = 5;
 * @return {?proto.codegen.ResourceOptions}
 */
proto.codegen.Resource.prototype.getOptions = function() {
  return /** @type{?proto.codegen.ResourceOptions} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ResourceOptions, 5));
};


/**
 * @param {?proto.codegen.ResourceOptions|undefined} value
 * @return {!proto.codegen.Resource} returns this
*/
proto.codegen.Resource.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Resource} returns this
 */
proto.codegen.Resource.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Resource.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ResourceInput.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ResourceInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ResourceInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ResourceInput}
 */
proto.codegen.ResourceInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ResourceInput;
  return proto.codegen.ResourceInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ResourceInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ResourceInput}
 */
proto.codegen.ResourceInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ResourceInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ResourceInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ResourceInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.ResourceInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.ResourceInput} returns this
 */
proto.codegen.ResourceInput.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Expression value = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceInput.prototype.getValue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceInput} returns this
*/
proto.codegen.ResourceInput.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceInput} returns this
 */
proto.codegen.ResourceInput.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceInput.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ResourceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ResourceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ResourceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    dependson: (f = msg.getDependson()) && proto.codegen.Expression.toObject(includeInstance, f),
    protect: (f = msg.getProtect()) && proto.codegen.Expression.toObject(includeInstance, f),
    parent: (f = msg.getParent()) && proto.codegen.Expression.toObject(includeInstance, f),
    ignorechanges: (f = msg.getIgnorechanges()) && proto.codegen.Expression.toObject(includeInstance, f),
    provider: (f = msg.getProvider()) && proto.codegen.Expression.toObject(includeInstance, f),
    version: (f = msg.getVersion()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ResourceOptions}
 */
proto.codegen.ResourceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ResourceOptions;
  return proto.codegen.ResourceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ResourceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ResourceOptions}
 */
proto.codegen.ResourceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setDependson(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setProtect(value);
      break;
    case 3:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 4:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setIgnorechanges(value);
      break;
    case 5:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setProvider(value);
      break;
    case 6:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ResourceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ResourceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ResourceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ResourceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDependson();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getProtect();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getIgnorechanges();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getProvider();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression dependsOn = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getDependson = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setDependson = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearDependson = function() {
  return this.setDependson(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasDependson = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression protect = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getProtect = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setProtect = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearProtect = function() {
  return this.setProtect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasProtect = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expression parent = 3;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getParent = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 3));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasParent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Expression ignoreChanges = 4;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getIgnorechanges = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 4));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setIgnorechanges = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearIgnorechanges = function() {
  return this.setIgnorechanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasIgnorechanges = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Expression provider = 5;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getProvider = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 5));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setProvider = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearProvider = function() {
  return this.setProvider(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasProvider = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Expression version = 6;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ResourceOptions.prototype.getVersion = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 6));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ResourceOptions} returns this
*/
proto.codegen.ResourceOptions.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ResourceOptions} returns this
 */
proto.codegen.ResourceOptions.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ResourceOptions.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.LocalVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.LocalVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.LocalVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.LocalVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logicalname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: (f = msg.getValue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.LocalVariable}
 */
proto.codegen.LocalVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.LocalVariable;
  return proto.codegen.LocalVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.LocalVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.LocalVariable}
 */
proto.codegen.LocalVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalname(value);
      break;
    case 3:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.LocalVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.LocalVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.LocalVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.LocalVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogicalname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.LocalVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.LocalVariable} returns this
 */
proto.codegen.LocalVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logicalName = 2;
 * @return {string}
 */
proto.codegen.LocalVariable.prototype.getLogicalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.LocalVariable} returns this
 */
proto.codegen.LocalVariable.prototype.setLogicalname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Expression value = 3;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.LocalVariable.prototype.getValue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 3));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.LocalVariable} returns this
*/
proto.codegen.LocalVariable.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.LocalVariable} returns this
 */
proto.codegen.LocalVariable.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.LocalVariable.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ConfigVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ConfigVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ConfigVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ConfigVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logicalname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    configtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    defaultvalue: (f = msg.getDefaultvalue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ConfigVariable}
 */
proto.codegen.ConfigVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ConfigVariable;
  return proto.codegen.ConfigVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ConfigVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ConfigVariable}
 */
proto.codegen.ConfigVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalname(value);
      break;
    case 3:
      var value = /** @type {!proto.codegen.ConfigType} */ (reader.readEnum());
      msg.setConfigtype(value);
      break;
    case 4:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setDefaultvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ConfigVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ConfigVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ConfigVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ConfigVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogicalname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfigtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDefaultvalue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.ConfigVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.ConfigVariable} returns this
 */
proto.codegen.ConfigVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logicalName = 2;
 * @return {string}
 */
proto.codegen.ConfigVariable.prototype.getLogicalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.ConfigVariable} returns this
 */
proto.codegen.ConfigVariable.prototype.setLogicalname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ConfigType configType = 3;
 * @return {!proto.codegen.ConfigType}
 */
proto.codegen.ConfigVariable.prototype.getConfigtype = function() {
  return /** @type {!proto.codegen.ConfigType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.codegen.ConfigType} value
 * @return {!proto.codegen.ConfigVariable} returns this
 */
proto.codegen.ConfigVariable.prototype.setConfigtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Expression defaultValue = 4;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ConfigVariable.prototype.getDefaultvalue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 4));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ConfigVariable} returns this
*/
proto.codegen.ConfigVariable.prototype.setDefaultvalue = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ConfigVariable} returns this
 */
proto.codegen.ConfigVariable.prototype.clearDefaultvalue = function() {
  return this.setDefaultvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ConfigVariable.prototype.hasDefaultvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.OutputVariable.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.OutputVariable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.OutputVariable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.OutputVariable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    logicalname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: (f = msg.getValue()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.OutputVariable}
 */
proto.codegen.OutputVariable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.OutputVariable;
  return proto.codegen.OutputVariable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.OutputVariable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.OutputVariable}
 */
proto.codegen.OutputVariable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogicalname(value);
      break;
    case 3:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.OutputVariable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.OutputVariable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.OutputVariable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.OutputVariable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLogicalname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.OutputVariable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.OutputVariable} returns this
 */
proto.codegen.OutputVariable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string logicalName = 2;
 * @return {string}
 */
proto.codegen.OutputVariable.prototype.getLogicalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.OutputVariable} returns this
 */
proto.codegen.OutputVariable.prototype.setLogicalname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Expression value = 3;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.OutputVariable.prototype.getValue = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 3));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.OutputVariable} returns this
*/
proto.codegen.OutputVariable.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.OutputVariable} returns this
 */
proto.codegen.OutputVariable.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.OutputVariable.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.Expression.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12]];

/**
 * @enum {number}
 */
proto.codegen.Expression.ValueCase = {
  VALUE_NOT_SET: 0,
  LITERALVALUEEXPRESSION: 1,
  TEMPLATEEXPRESSION: 2,
  INDEXEXPRESSION: 3,
  OBJECTCONSEXPRESSION: 4,
  TUPLECONSEXPRESSION: 5,
  FUNCTIONCALLEXPRESSION: 6,
  RELATIVETRAVERSALEXPRESSION: 7,
  SCOPETRAVERSALEXPRESSION: 8,
  ANONYMOUSFUNCTIONEXPRESSION: 9,
  CONDITIONALEXPRESSION: 10,
  BINARYOPEXPRESSION: 11,
  UNARYOPEXPRESSION: 12
};

/**
 * @return {proto.codegen.Expression.ValueCase}
 */
proto.codegen.Expression.prototype.getValueCase = function() {
  return /** @type {proto.codegen.Expression.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    literalvalueexpression: (f = msg.getLiteralvalueexpression()) && proto.codegen.LiteralValueExpression.toObject(includeInstance, f),
    templateexpression: (f = msg.getTemplateexpression()) && proto.codegen.TemplateExpression.toObject(includeInstance, f),
    indexexpression: (f = msg.getIndexexpression()) && proto.codegen.IndexExpression.toObject(includeInstance, f),
    objectconsexpression: (f = msg.getObjectconsexpression()) && proto.codegen.ObjectConsExpression.toObject(includeInstance, f),
    tupleconsexpression: (f = msg.getTupleconsexpression()) && proto.codegen.TupleConsExpression.toObject(includeInstance, f),
    functioncallexpression: (f = msg.getFunctioncallexpression()) && proto.codegen.FunctionCallExpression.toObject(includeInstance, f),
    relativetraversalexpression: (f = msg.getRelativetraversalexpression()) && proto.codegen.RelativeTraversalExpression.toObject(includeInstance, f),
    scopetraversalexpression: (f = msg.getScopetraversalexpression()) && proto.codegen.ScopeTraversalExpression.toObject(includeInstance, f),
    anonymousfunctionexpression: (f = msg.getAnonymousfunctionexpression()) && proto.codegen.AnonymousFunctionExpression.toObject(includeInstance, f),
    conditionalexpression: (f = msg.getConditionalexpression()) && proto.codegen.ConditionalExpression.toObject(includeInstance, f),
    binaryopexpression: (f = msg.getBinaryopexpression()) && proto.codegen.BinaryOpExpression.toObject(includeInstance, f),
    unaryopexpression: (f = msg.getUnaryopexpression()) && proto.codegen.UnaryOpExpression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Expression}
 */
proto.codegen.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Expression;
  return proto.codegen.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Expression}
 */
proto.codegen.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.LiteralValueExpression;
      reader.readMessage(value,proto.codegen.LiteralValueExpression.deserializeBinaryFromReader);
      msg.setLiteralvalueexpression(value);
      break;
    case 2:
      var value = new proto.codegen.TemplateExpression;
      reader.readMessage(value,proto.codegen.TemplateExpression.deserializeBinaryFromReader);
      msg.setTemplateexpression(value);
      break;
    case 3:
      var value = new proto.codegen.IndexExpression;
      reader.readMessage(value,proto.codegen.IndexExpression.deserializeBinaryFromReader);
      msg.setIndexexpression(value);
      break;
    case 4:
      var value = new proto.codegen.ObjectConsExpression;
      reader.readMessage(value,proto.codegen.ObjectConsExpression.deserializeBinaryFromReader);
      msg.setObjectconsexpression(value);
      break;
    case 5:
      var value = new proto.codegen.TupleConsExpression;
      reader.readMessage(value,proto.codegen.TupleConsExpression.deserializeBinaryFromReader);
      msg.setTupleconsexpression(value);
      break;
    case 6:
      var value = new proto.codegen.FunctionCallExpression;
      reader.readMessage(value,proto.codegen.FunctionCallExpression.deserializeBinaryFromReader);
      msg.setFunctioncallexpression(value);
      break;
    case 7:
      var value = new proto.codegen.RelativeTraversalExpression;
      reader.readMessage(value,proto.codegen.RelativeTraversalExpression.deserializeBinaryFromReader);
      msg.setRelativetraversalexpression(value);
      break;
    case 8:
      var value = new proto.codegen.ScopeTraversalExpression;
      reader.readMessage(value,proto.codegen.ScopeTraversalExpression.deserializeBinaryFromReader);
      msg.setScopetraversalexpression(value);
      break;
    case 9:
      var value = new proto.codegen.AnonymousFunctionExpression;
      reader.readMessage(value,proto.codegen.AnonymousFunctionExpression.deserializeBinaryFromReader);
      msg.setAnonymousfunctionexpression(value);
      break;
    case 10:
      var value = new proto.codegen.ConditionalExpression;
      reader.readMessage(value,proto.codegen.ConditionalExpression.deserializeBinaryFromReader);
      msg.setConditionalexpression(value);
      break;
    case 11:
      var value = new proto.codegen.BinaryOpExpression;
      reader.readMessage(value,proto.codegen.BinaryOpExpression.deserializeBinaryFromReader);
      msg.setBinaryopexpression(value);
      break;
    case 12:
      var value = new proto.codegen.UnaryOpExpression;
      reader.readMessage(value,proto.codegen.UnaryOpExpression.deserializeBinaryFromReader);
      msg.setUnaryopexpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLiteralvalueexpression();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.LiteralValueExpression.serializeBinaryToWriter
    );
  }
  f = message.getTemplateexpression();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.TemplateExpression.serializeBinaryToWriter
    );
  }
  f = message.getIndexexpression();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.IndexExpression.serializeBinaryToWriter
    );
  }
  f = message.getObjectconsexpression();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.codegen.ObjectConsExpression.serializeBinaryToWriter
    );
  }
  f = message.getTupleconsexpression();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.codegen.TupleConsExpression.serializeBinaryToWriter
    );
  }
  f = message.getFunctioncallexpression();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.codegen.FunctionCallExpression.serializeBinaryToWriter
    );
  }
  f = message.getRelativetraversalexpression();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.codegen.RelativeTraversalExpression.serializeBinaryToWriter
    );
  }
  f = message.getScopetraversalexpression();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.codegen.ScopeTraversalExpression.serializeBinaryToWriter
    );
  }
  f = message.getAnonymousfunctionexpression();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.codegen.AnonymousFunctionExpression.serializeBinaryToWriter
    );
  }
  f = message.getConditionalexpression();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.codegen.ConditionalExpression.serializeBinaryToWriter
    );
  }
  f = message.getBinaryopexpression();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.codegen.BinaryOpExpression.serializeBinaryToWriter
    );
  }
  f = message.getUnaryopexpression();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.codegen.UnaryOpExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional LiteralValueExpression literalValueExpression = 1;
 * @return {?proto.codegen.LiteralValueExpression}
 */
proto.codegen.Expression.prototype.getLiteralvalueexpression = function() {
  return /** @type{?proto.codegen.LiteralValueExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.LiteralValueExpression, 1));
};


/**
 * @param {?proto.codegen.LiteralValueExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setLiteralvalueexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearLiteralvalueexpression = function() {
  return this.setLiteralvalueexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasLiteralvalueexpression = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TemplateExpression templateExpression = 2;
 * @return {?proto.codegen.TemplateExpression}
 */
proto.codegen.Expression.prototype.getTemplateexpression = function() {
  return /** @type{?proto.codegen.TemplateExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TemplateExpression, 2));
};


/**
 * @param {?proto.codegen.TemplateExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setTemplateexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearTemplateexpression = function() {
  return this.setTemplateexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasTemplateexpression = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional IndexExpression indexExpression = 3;
 * @return {?proto.codegen.IndexExpression}
 */
proto.codegen.Expression.prototype.getIndexexpression = function() {
  return /** @type{?proto.codegen.IndexExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.IndexExpression, 3));
};


/**
 * @param {?proto.codegen.IndexExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setIndexexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearIndexexpression = function() {
  return this.setIndexexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasIndexexpression = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ObjectConsExpression objectConsExpression = 4;
 * @return {?proto.codegen.ObjectConsExpression}
 */
proto.codegen.Expression.prototype.getObjectconsexpression = function() {
  return /** @type{?proto.codegen.ObjectConsExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ObjectConsExpression, 4));
};


/**
 * @param {?proto.codegen.ObjectConsExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setObjectconsexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearObjectconsexpression = function() {
  return this.setObjectconsexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasObjectconsexpression = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TupleConsExpression tupleConsExpression = 5;
 * @return {?proto.codegen.TupleConsExpression}
 */
proto.codegen.Expression.prototype.getTupleconsexpression = function() {
  return /** @type{?proto.codegen.TupleConsExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TupleConsExpression, 5));
};


/**
 * @param {?proto.codegen.TupleConsExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setTupleconsexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearTupleconsexpression = function() {
  return this.setTupleconsexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasTupleconsexpression = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FunctionCallExpression functionCallExpression = 6;
 * @return {?proto.codegen.FunctionCallExpression}
 */
proto.codegen.Expression.prototype.getFunctioncallexpression = function() {
  return /** @type{?proto.codegen.FunctionCallExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.FunctionCallExpression, 6));
};


/**
 * @param {?proto.codegen.FunctionCallExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setFunctioncallexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearFunctioncallexpression = function() {
  return this.setFunctioncallexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasFunctioncallexpression = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RelativeTraversalExpression relativeTraversalExpression = 7;
 * @return {?proto.codegen.RelativeTraversalExpression}
 */
proto.codegen.Expression.prototype.getRelativetraversalexpression = function() {
  return /** @type{?proto.codegen.RelativeTraversalExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.RelativeTraversalExpression, 7));
};


/**
 * @param {?proto.codegen.RelativeTraversalExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setRelativetraversalexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearRelativetraversalexpression = function() {
  return this.setRelativetraversalexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasRelativetraversalexpression = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ScopeTraversalExpression scopeTraversalExpression = 8;
 * @return {?proto.codegen.ScopeTraversalExpression}
 */
proto.codegen.Expression.prototype.getScopetraversalexpression = function() {
  return /** @type{?proto.codegen.ScopeTraversalExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ScopeTraversalExpression, 8));
};


/**
 * @param {?proto.codegen.ScopeTraversalExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setScopetraversalexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearScopetraversalexpression = function() {
  return this.setScopetraversalexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasScopetraversalexpression = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional AnonymousFunctionExpression anonymousFunctionExpression = 9;
 * @return {?proto.codegen.AnonymousFunctionExpression}
 */
proto.codegen.Expression.prototype.getAnonymousfunctionexpression = function() {
  return /** @type{?proto.codegen.AnonymousFunctionExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.AnonymousFunctionExpression, 9));
};


/**
 * @param {?proto.codegen.AnonymousFunctionExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setAnonymousfunctionexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearAnonymousfunctionexpression = function() {
  return this.setAnonymousfunctionexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasAnonymousfunctionexpression = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ConditionalExpression conditionalExpression = 10;
 * @return {?proto.codegen.ConditionalExpression}
 */
proto.codegen.Expression.prototype.getConditionalexpression = function() {
  return /** @type{?proto.codegen.ConditionalExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.ConditionalExpression, 10));
};


/**
 * @param {?proto.codegen.ConditionalExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setConditionalexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearConditionalexpression = function() {
  return this.setConditionalexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasConditionalexpression = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BinaryOpExpression binaryOpExpression = 11;
 * @return {?proto.codegen.BinaryOpExpression}
 */
proto.codegen.Expression.prototype.getBinaryopexpression = function() {
  return /** @type{?proto.codegen.BinaryOpExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.BinaryOpExpression, 11));
};


/**
 * @param {?proto.codegen.BinaryOpExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setBinaryopexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearBinaryopexpression = function() {
  return this.setBinaryopexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasBinaryopexpression = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional UnaryOpExpression unaryOpExpression = 12;
 * @return {?proto.codegen.UnaryOpExpression}
 */
proto.codegen.Expression.prototype.getUnaryopexpression = function() {
  return /** @type{?proto.codegen.UnaryOpExpression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.UnaryOpExpression, 12));
};


/**
 * @param {?proto.codegen.UnaryOpExpression|undefined} value
 * @return {!proto.codegen.Expression} returns this
*/
proto.codegen.Expression.prototype.setUnaryopexpression = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.codegen.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Expression} returns this
 */
proto.codegen.Expression.prototype.clearUnaryopexpression = function() {
  return this.setUnaryopexpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Expression.prototype.hasUnaryopexpression = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.LiteralValueExpression.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.codegen.LiteralValueExpression.ValueCase = {
  VALUE_NOT_SET: 0,
  UNKNOWNVALUE: 1,
  STRINGVALUE: 2,
  NUMBERVALUE: 3,
  BOOLVALUE: 4
};

/**
 * @return {proto.codegen.LiteralValueExpression.ValueCase}
 */
proto.codegen.LiteralValueExpression.prototype.getValueCase = function() {
  return /** @type {proto.codegen.LiteralValueExpression.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.LiteralValueExpression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.LiteralValueExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.LiteralValueExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.LiteralValueExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.LiteralValueExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    unknownvalue: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    stringvalue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    numbervalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    boolvalue: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.LiteralValueExpression}
 */
proto.codegen.LiteralValueExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.LiteralValueExpression;
  return proto.codegen.LiteralValueExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.LiteralValueExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.LiteralValueExpression}
 */
proto.codegen.LiteralValueExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUnknownvalue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNumbervalue(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.LiteralValueExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.LiteralValueExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.LiteralValueExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.LiteralValueExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bool unknownValue = 1;
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.getUnknownvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.setUnknownvalue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.codegen.LiteralValueExpression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.clearUnknownvalue = function() {
  return jspb.Message.setOneofField(this, 1, proto.codegen.LiteralValueExpression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.hasUnknownvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stringValue = 2;
 * @return {string}
 */
proto.codegen.LiteralValueExpression.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.codegen.LiteralValueExpression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 2, proto.codegen.LiteralValueExpression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double numberValue = 3;
 * @return {number}
 */
proto.codegen.LiteralValueExpression.prototype.getNumbervalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.setNumbervalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.codegen.LiteralValueExpression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.clearNumbervalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.codegen.LiteralValueExpression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.hasNumbervalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool boolValue = 4;
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.getBoolvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.setBoolvalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.codegen.LiteralValueExpression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.LiteralValueExpression} returns this
 */
proto.codegen.LiteralValueExpression.prototype.clearBoolvalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.codegen.LiteralValueExpression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.LiteralValueExpression.prototype.hasBoolvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.TemplateExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TemplateExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TemplateExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TemplateExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TemplateExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    partsList: jspb.Message.toObjectList(msg.getPartsList(),
    proto.codegen.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TemplateExpression}
 */
proto.codegen.TemplateExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TemplateExpression;
  return proto.codegen.TemplateExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TemplateExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TemplateExpression}
 */
proto.codegen.TemplateExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.addParts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TemplateExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TemplateExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TemplateExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TemplateExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Expression parts = 1;
 * @return {!Array<!proto.codegen.Expression>}
 */
proto.codegen.TemplateExpression.prototype.getPartsList = function() {
  return /** @type{!Array<!proto.codegen.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {!Array<!proto.codegen.Expression>} value
 * @return {!proto.codegen.TemplateExpression} returns this
*/
proto.codegen.TemplateExpression.prototype.setPartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Expression}
 */
proto.codegen.TemplateExpression.prototype.addParts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.TemplateExpression} returns this
 */
proto.codegen.TemplateExpression.prototype.clearPartsList = function() {
  return this.setPartsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.IndexExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.IndexExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.IndexExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.IndexExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && proto.codegen.Expression.toObject(includeInstance, f),
    key: (f = msg.getKey()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.IndexExpression}
 */
proto.codegen.IndexExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.IndexExpression;
  return proto.codegen.IndexExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.IndexExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.IndexExpression}
 */
proto.codegen.IndexExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.IndexExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.IndexExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.IndexExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.IndexExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression collection = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.IndexExpression.prototype.getCollection = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.IndexExpression} returns this
*/
proto.codegen.IndexExpression.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.IndexExpression} returns this
 */
proto.codegen.IndexExpression.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.IndexExpression.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression key = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.IndexExpression.prototype.getKey = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.IndexExpression} returns this
*/
proto.codegen.IndexExpression.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.IndexExpression} returns this
 */
proto.codegen.IndexExpression.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.IndexExpression.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ObjectConsExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ObjectConsExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ObjectConsExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConsExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.codegen.Expression.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ObjectConsExpression}
 */
proto.codegen.ObjectConsExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ObjectConsExpression;
  return proto.codegen.ObjectConsExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ObjectConsExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ObjectConsExpression}
 */
proto.codegen.ObjectConsExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.codegen.Expression.deserializeBinaryFromReader, "", new proto.codegen.Expression());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ObjectConsExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ObjectConsExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ObjectConsExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ObjectConsExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.codegen.Expression.serializeBinaryToWriter);
  }
};


/**
 * map<string, Expression> properties = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.codegen.Expression>}
 */
proto.codegen.ObjectConsExpression.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.codegen.Expression>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.codegen.Expression));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.codegen.ObjectConsExpression} returns this
 */
proto.codegen.ObjectConsExpression.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.TupleConsExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TupleConsExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TupleConsExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TupleConsExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TupleConsExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.codegen.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TupleConsExpression}
 */
proto.codegen.TupleConsExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TupleConsExpression;
  return proto.codegen.TupleConsExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TupleConsExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TupleConsExpression}
 */
proto.codegen.TupleConsExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TupleConsExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TupleConsExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TupleConsExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TupleConsExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Expression items = 1;
 * @return {!Array<!proto.codegen.Expression>}
 */
proto.codegen.TupleConsExpression.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.codegen.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {!Array<!proto.codegen.Expression>} value
 * @return {!proto.codegen.TupleConsExpression} returns this
*/
proto.codegen.TupleConsExpression.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Expression}
 */
proto.codegen.TupleConsExpression.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.TupleConsExpression} returns this
 */
proto.codegen.TupleConsExpression.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.FunctionCallExpression.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.FunctionCallExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.FunctionCallExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.FunctionCallExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.FunctionCallExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    argsList: jspb.Message.toObjectList(msg.getArgsList(),
    proto.codegen.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.FunctionCallExpression}
 */
proto.codegen.FunctionCallExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.FunctionCallExpression;
  return proto.codegen.FunctionCallExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.FunctionCallExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.FunctionCallExpression}
 */
proto.codegen.FunctionCallExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.addArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.FunctionCallExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.FunctionCallExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.FunctionCallExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.FunctionCallExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.FunctionCallExpression.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.FunctionCallExpression} returns this
 */
proto.codegen.FunctionCallExpression.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Expression args = 2;
 * @return {!Array<!proto.codegen.Expression>}
 */
proto.codegen.FunctionCallExpression.prototype.getArgsList = function() {
  return /** @type{!Array<!proto.codegen.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {!Array<!proto.codegen.Expression>} value
 * @return {!proto.codegen.FunctionCallExpression} returns this
*/
proto.codegen.FunctionCallExpression.prototype.setArgsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.codegen.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Expression}
 */
proto.codegen.FunctionCallExpression.prototype.addArgs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.codegen.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.FunctionCallExpression} returns this
 */
proto.codegen.FunctionCallExpression.prototype.clearArgsList = function() {
  return this.setArgsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.RelativeTraversalExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.RelativeTraversalExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.RelativeTraversalExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.RelativeTraversalExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.codegen.Expression.toObject(includeInstance, f),
    traversal: (f = msg.getTraversal()) && proto.codegen.Traversal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.RelativeTraversalExpression}
 */
proto.codegen.RelativeTraversalExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.RelativeTraversalExpression;
  return proto.codegen.RelativeTraversalExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.RelativeTraversalExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.RelativeTraversalExpression}
 */
proto.codegen.RelativeTraversalExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.codegen.Traversal;
      reader.readMessage(value,proto.codegen.Traversal.deserializeBinaryFromReader);
      msg.setTraversal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.RelativeTraversalExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.RelativeTraversalExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.RelativeTraversalExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.RelativeTraversalExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getTraversal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Traversal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression source = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.RelativeTraversalExpression.prototype.getSource = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.RelativeTraversalExpression} returns this
*/
proto.codegen.RelativeTraversalExpression.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.RelativeTraversalExpression} returns this
 */
proto.codegen.RelativeTraversalExpression.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.RelativeTraversalExpression.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Traversal traversal = 2;
 * @return {?proto.codegen.Traversal}
 */
proto.codegen.RelativeTraversalExpression.prototype.getTraversal = function() {
  return /** @type{?proto.codegen.Traversal} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Traversal, 2));
};


/**
 * @param {?proto.codegen.Traversal|undefined} value
 * @return {!proto.codegen.RelativeTraversalExpression} returns this
*/
proto.codegen.RelativeTraversalExpression.prototype.setTraversal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.RelativeTraversalExpression} returns this
 */
proto.codegen.RelativeTraversalExpression.prototype.clearTraversal = function() {
  return this.setTraversal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.RelativeTraversalExpression.prototype.hasTraversal = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ScopeTraversalExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ScopeTraversalExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ScopeTraversalExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ScopeTraversalExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    rootname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    traversal: (f = msg.getTraversal()) && proto.codegen.Traversal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ScopeTraversalExpression}
 */
proto.codegen.ScopeTraversalExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ScopeTraversalExpression;
  return proto.codegen.ScopeTraversalExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ScopeTraversalExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ScopeTraversalExpression}
 */
proto.codegen.ScopeTraversalExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRootname(value);
      break;
    case 2:
      var value = new proto.codegen.Traversal;
      reader.readMessage(value,proto.codegen.Traversal.deserializeBinaryFromReader);
      msg.setTraversal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ScopeTraversalExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ScopeTraversalExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ScopeTraversalExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ScopeTraversalExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRootname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraversal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Traversal.serializeBinaryToWriter
    );
  }
};


/**
 * optional string rootName = 1;
 * @return {string}
 */
proto.codegen.ScopeTraversalExpression.prototype.getRootname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.ScopeTraversalExpression} returns this
 */
proto.codegen.ScopeTraversalExpression.prototype.setRootname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Traversal traversal = 2;
 * @return {?proto.codegen.Traversal}
 */
proto.codegen.ScopeTraversalExpression.prototype.getTraversal = function() {
  return /** @type{?proto.codegen.Traversal} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Traversal, 2));
};


/**
 * @param {?proto.codegen.Traversal|undefined} value
 * @return {!proto.codegen.ScopeTraversalExpression} returns this
*/
proto.codegen.ScopeTraversalExpression.prototype.setTraversal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ScopeTraversalExpression} returns this
 */
proto.codegen.ScopeTraversalExpression.prototype.clearTraversal = function() {
  return this.setTraversal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ScopeTraversalExpression.prototype.hasTraversal = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.AnonymousFunctionExpression.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.AnonymousFunctionExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.AnonymousFunctionExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.AnonymousFunctionExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.AnonymousFunctionExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: (f = msg.getBody()) && proto.codegen.Expression.toObject(includeInstance, f),
    parametersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.AnonymousFunctionExpression}
 */
proto.codegen.AnonymousFunctionExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.AnonymousFunctionExpression;
  return proto.codegen.AnonymousFunctionExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.AnonymousFunctionExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.AnonymousFunctionExpression}
 */
proto.codegen.AnonymousFunctionExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.AnonymousFunctionExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.AnonymousFunctionExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.AnonymousFunctionExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.AnonymousFunctionExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Expression body = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.AnonymousFunctionExpression.prototype.getBody = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.AnonymousFunctionExpression} returns this
*/
proto.codegen.AnonymousFunctionExpression.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.AnonymousFunctionExpression} returns this
 */
proto.codegen.AnonymousFunctionExpression.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.AnonymousFunctionExpression.prototype.hasBody = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string parameters = 2;
 * @return {!Array<string>}
 */
proto.codegen.AnonymousFunctionExpression.prototype.getParametersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.codegen.AnonymousFunctionExpression} returns this
 */
proto.codegen.AnonymousFunctionExpression.prototype.setParametersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.codegen.AnonymousFunctionExpression} returns this
 */
proto.codegen.AnonymousFunctionExpression.prototype.addParameters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.AnonymousFunctionExpression} returns this
 */
proto.codegen.AnonymousFunctionExpression.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.ConditionalExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.ConditionalExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.ConditionalExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ConditionalExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: (f = msg.getCondition()) && proto.codegen.Expression.toObject(includeInstance, f),
    trueexpr: (f = msg.getTrueexpr()) && proto.codegen.Expression.toObject(includeInstance, f),
    falseexpr: (f = msg.getFalseexpr()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.ConditionalExpression}
 */
proto.codegen.ConditionalExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.ConditionalExpression;
  return proto.codegen.ConditionalExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.ConditionalExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.ConditionalExpression}
 */
proto.codegen.ConditionalExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setTrueexpr(value);
      break;
    case 3:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setFalseexpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.ConditionalExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.ConditionalExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.ConditionalExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.ConditionalExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getTrueexpr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getFalseexpr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression condition = 1;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ConditionalExpression.prototype.getCondition = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 1));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ConditionalExpression} returns this
*/
proto.codegen.ConditionalExpression.prototype.setCondition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ConditionalExpression} returns this
 */
proto.codegen.ConditionalExpression.prototype.clearCondition = function() {
  return this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ConditionalExpression.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression trueExpr = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ConditionalExpression.prototype.getTrueexpr = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ConditionalExpression} returns this
*/
proto.codegen.ConditionalExpression.prototype.setTrueexpr = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ConditionalExpression} returns this
 */
proto.codegen.ConditionalExpression.prototype.clearTrueexpr = function() {
  return this.setTrueexpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ConditionalExpression.prototype.hasTrueexpr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expression falseExpr = 3;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.ConditionalExpression.prototype.getFalseexpr = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 3));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.ConditionalExpression} returns this
*/
proto.codegen.ConditionalExpression.prototype.setFalseexpr = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.ConditionalExpression} returns this
 */
proto.codegen.ConditionalExpression.prototype.clearFalseexpr = function() {
  return this.setFalseexpr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.ConditionalExpression.prototype.hasFalseexpr = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.BinaryOpExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.BinaryOpExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.BinaryOpExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.BinaryOpExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    left: (f = msg.getLeft()) && proto.codegen.Expression.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.BinaryOpExpression}
 */
proto.codegen.BinaryOpExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.BinaryOpExpression;
  return proto.codegen.BinaryOpExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.BinaryOpExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.BinaryOpExpression}
 */
proto.codegen.BinaryOpExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.codegen.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 3:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.BinaryOpExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.BinaryOpExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.BinaryOpExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.BinaryOpExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Operation operation = 1;
 * @return {!proto.codegen.Operation}
 */
proto.codegen.BinaryOpExpression.prototype.getOperation = function() {
  return /** @type {!proto.codegen.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.codegen.Operation} value
 * @return {!proto.codegen.BinaryOpExpression} returns this
 */
proto.codegen.BinaryOpExpression.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Expression left = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.BinaryOpExpression.prototype.getLeft = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.BinaryOpExpression} returns this
*/
proto.codegen.BinaryOpExpression.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.BinaryOpExpression} returns this
 */
proto.codegen.BinaryOpExpression.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.BinaryOpExpression.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Expression right = 3;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.BinaryOpExpression.prototype.getRight = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 3));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.BinaryOpExpression} returns this
*/
proto.codegen.BinaryOpExpression.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.BinaryOpExpression} returns this
 */
proto.codegen.BinaryOpExpression.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.BinaryOpExpression.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.UnaryOpExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.UnaryOpExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.UnaryOpExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.UnaryOpExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    operand: (f = msg.getOperand()) && proto.codegen.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.UnaryOpExpression}
 */
proto.codegen.UnaryOpExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.UnaryOpExpression;
  return proto.codegen.UnaryOpExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.UnaryOpExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.UnaryOpExpression}
 */
proto.codegen.UnaryOpExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.codegen.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = new proto.codegen.Expression;
      reader.readMessage(value,proto.codegen.Expression.deserializeBinaryFromReader);
      msg.setOperand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.UnaryOpExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.UnaryOpExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.UnaryOpExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.UnaryOpExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOperand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Operation operation = 1;
 * @return {!proto.codegen.Operation}
 */
proto.codegen.UnaryOpExpression.prototype.getOperation = function() {
  return /** @type {!proto.codegen.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.codegen.Operation} value
 * @return {!proto.codegen.UnaryOpExpression} returns this
 */
proto.codegen.UnaryOpExpression.prototype.setOperation = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Expression operand = 2;
 * @return {?proto.codegen.Expression}
 */
proto.codegen.UnaryOpExpression.prototype.getOperand = function() {
  return /** @type{?proto.codegen.Expression} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Expression, 2));
};


/**
 * @param {?proto.codegen.Expression|undefined} value
 * @return {!proto.codegen.UnaryOpExpression} returns this
*/
proto.codegen.UnaryOpExpression.prototype.setOperand = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.UnaryOpExpression} returns this
 */
proto.codegen.UnaryOpExpression.prototype.clearOperand = function() {
  return this.setOperand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.UnaryOpExpression.prototype.hasOperand = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.codegen.Traversal.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Traversal.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Traversal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Traversal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Traversal.toObject = function(includeInstance, msg) {
  var f, obj = {
    eachList: jspb.Message.toObjectList(msg.getEachList(),
    proto.codegen.Traverser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Traversal}
 */
proto.codegen.Traversal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Traversal;
  return proto.codegen.Traversal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Traversal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Traversal}
 */
proto.codegen.Traversal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Traverser;
      reader.readMessage(value,proto.codegen.Traverser.deserializeBinaryFromReader);
      msg.addEach(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Traversal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Traversal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Traversal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Traversal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEachList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.codegen.Traverser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Traverser each = 1;
 * @return {!Array<!proto.codegen.Traverser>}
 */
proto.codegen.Traversal.prototype.getEachList = function() {
  return /** @type{!Array<!proto.codegen.Traverser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.codegen.Traverser, 1));
};


/**
 * @param {!Array<!proto.codegen.Traverser>} value
 * @return {!proto.codegen.Traversal} returns this
*/
proto.codegen.Traversal.prototype.setEachList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.codegen.Traverser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.codegen.Traverser}
 */
proto.codegen.Traversal.prototype.addEach = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.codegen.Traverser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.codegen.Traversal} returns this
 */
proto.codegen.Traversal.prototype.clearEachList = function() {
  return this.setEachList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.Traverser.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.codegen.Traverser.ValueCase = {
  VALUE_NOT_SET: 0,
  TRAVERSEATTR: 1,
  TRAVERSEINDEX: 2,
  TRAVERSEROOT: 3,
  TRAVERSESPLAT: 4
};

/**
 * @return {proto.codegen.Traverser.ValueCase}
 */
proto.codegen.Traverser.prototype.getValueCase = function() {
  return /** @type {proto.codegen.Traverser.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.Traverser.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.Traverser.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.Traverser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.Traverser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Traverser.toObject = function(includeInstance, msg) {
  var f, obj = {
    traverseattr: (f = msg.getTraverseattr()) && proto.codegen.TraverseAttr.toObject(includeInstance, f),
    traverseindex: (f = msg.getTraverseindex()) && proto.codegen.TraverseIndex.toObject(includeInstance, f),
    traverseroot: (f = msg.getTraverseroot()) && proto.codegen.TraverseRoot.toObject(includeInstance, f),
    traversesplat: (f = msg.getTraversesplat()) && proto.codegen.TraverseSplat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.Traverser}
 */
proto.codegen.Traverser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.Traverser;
  return proto.codegen.Traverser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.Traverser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.Traverser}
 */
proto.codegen.Traverser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.TraverseAttr;
      reader.readMessage(value,proto.codegen.TraverseAttr.deserializeBinaryFromReader);
      msg.setTraverseattr(value);
      break;
    case 2:
      var value = new proto.codegen.TraverseIndex;
      reader.readMessage(value,proto.codegen.TraverseIndex.deserializeBinaryFromReader);
      msg.setTraverseindex(value);
      break;
    case 3:
      var value = new proto.codegen.TraverseRoot;
      reader.readMessage(value,proto.codegen.TraverseRoot.deserializeBinaryFromReader);
      msg.setTraverseroot(value);
      break;
    case 4:
      var value = new proto.codegen.TraverseSplat;
      reader.readMessage(value,proto.codegen.TraverseSplat.deserializeBinaryFromReader);
      msg.setTraversesplat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.Traverser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.Traverser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.Traverser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.Traverser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraverseattr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.TraverseAttr.serializeBinaryToWriter
    );
  }
  f = message.getTraverseindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.codegen.TraverseIndex.serializeBinaryToWriter
    );
  }
  f = message.getTraverseroot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.codegen.TraverseRoot.serializeBinaryToWriter
    );
  }
  f = message.getTraversesplat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.codegen.TraverseSplat.serializeBinaryToWriter
    );
  }
};


/**
 * optional TraverseAttr traverseAttr = 1;
 * @return {?proto.codegen.TraverseAttr}
 */
proto.codegen.Traverser.prototype.getTraverseattr = function() {
  return /** @type{?proto.codegen.TraverseAttr} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TraverseAttr, 1));
};


/**
 * @param {?proto.codegen.TraverseAttr|undefined} value
 * @return {!proto.codegen.Traverser} returns this
*/
proto.codegen.Traverser.prototype.setTraverseattr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.codegen.Traverser.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Traverser} returns this
 */
proto.codegen.Traverser.prototype.clearTraverseattr = function() {
  return this.setTraverseattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Traverser.prototype.hasTraverseattr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TraverseIndex traverseIndex = 2;
 * @return {?proto.codegen.TraverseIndex}
 */
proto.codegen.Traverser.prototype.getTraverseindex = function() {
  return /** @type{?proto.codegen.TraverseIndex} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TraverseIndex, 2));
};


/**
 * @param {?proto.codegen.TraverseIndex|undefined} value
 * @return {!proto.codegen.Traverser} returns this
*/
proto.codegen.Traverser.prototype.setTraverseindex = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.codegen.Traverser.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Traverser} returns this
 */
proto.codegen.Traverser.prototype.clearTraverseindex = function() {
  return this.setTraverseindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Traverser.prototype.hasTraverseindex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TraverseRoot traverseRoot = 3;
 * @return {?proto.codegen.TraverseRoot}
 */
proto.codegen.Traverser.prototype.getTraverseroot = function() {
  return /** @type{?proto.codegen.TraverseRoot} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TraverseRoot, 3));
};


/**
 * @param {?proto.codegen.TraverseRoot|undefined} value
 * @return {!proto.codegen.Traverser} returns this
*/
proto.codegen.Traverser.prototype.setTraverseroot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.codegen.Traverser.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Traverser} returns this
 */
proto.codegen.Traverser.prototype.clearTraverseroot = function() {
  return this.setTraverseroot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Traverser.prototype.hasTraverseroot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TraverseSplat traverseSplat = 4;
 * @return {?proto.codegen.TraverseSplat}
 */
proto.codegen.Traverser.prototype.getTraversesplat = function() {
  return /** @type{?proto.codegen.TraverseSplat} */ (
    jspb.Message.getWrapperField(this, proto.codegen.TraverseSplat, 4));
};


/**
 * @param {?proto.codegen.TraverseSplat|undefined} value
 * @return {!proto.codegen.Traverser} returns this
*/
proto.codegen.Traverser.prototype.setTraversesplat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.codegen.Traverser.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.Traverser} returns this
 */
proto.codegen.Traverser.prototype.clearTraversesplat = function() {
  return this.setTraversesplat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.Traverser.prototype.hasTraversesplat = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TraverseAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TraverseAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TraverseAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TraverseAttr}
 */
proto.codegen.TraverseAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TraverseAttr;
  return proto.codegen.TraverseAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TraverseAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TraverseAttr}
 */
proto.codegen.TraverseAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TraverseAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TraverseAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TraverseAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.TraverseAttr.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.TraverseAttr} returns this
 */
proto.codegen.TraverseAttr.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.codegen.TraverseIndex.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.codegen.TraverseIndex.ValueCase = {
  VALUE_NOT_SET: 0,
  INTINDEX: 1,
  STRINGINDEX: 2
};

/**
 * @return {proto.codegen.TraverseIndex.ValueCase}
 */
proto.codegen.TraverseIndex.prototype.getValueCase = function() {
  return /** @type {proto.codegen.TraverseIndex.ValueCase} */(jspb.Message.computeOneofCase(this, proto.codegen.TraverseIndex.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TraverseIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TraverseIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TraverseIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    intindex: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stringindex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TraverseIndex}
 */
proto.codegen.TraverseIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TraverseIndex;
  return proto.codegen.TraverseIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TraverseIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TraverseIndex}
 */
proto.codegen.TraverseIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntindex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TraverseIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TraverseIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TraverseIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 intIndex = 1;
 * @return {number}
 */
proto.codegen.TraverseIndex.prototype.getIntindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.codegen.TraverseIndex} returns this
 */
proto.codegen.TraverseIndex.prototype.setIntindex = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.codegen.TraverseIndex.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.TraverseIndex} returns this
 */
proto.codegen.TraverseIndex.prototype.clearIntindex = function() {
  return jspb.Message.setOneofField(this, 1, proto.codegen.TraverseIndex.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.TraverseIndex.prototype.hasIntindex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string stringIndex = 2;
 * @return {string}
 */
proto.codegen.TraverseIndex.prototype.getStringindex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.TraverseIndex} returns this
 */
proto.codegen.TraverseIndex.prototype.setStringindex = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.codegen.TraverseIndex.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.codegen.TraverseIndex} returns this
 */
proto.codegen.TraverseIndex.prototype.clearStringindex = function() {
  return jspb.Message.setOneofField(this, 2, proto.codegen.TraverseIndex.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.TraverseIndex.prototype.hasStringindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TraverseRoot.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TraverseRoot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TraverseRoot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseRoot.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TraverseRoot}
 */
proto.codegen.TraverseRoot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TraverseRoot;
  return proto.codegen.TraverseRoot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TraverseRoot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TraverseRoot}
 */
proto.codegen.TraverseRoot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TraverseRoot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TraverseRoot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TraverseRoot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseRoot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.codegen.TraverseRoot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.codegen.TraverseRoot} returns this
 */
proto.codegen.TraverseRoot.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.codegen.TraverseSplat.prototype.toObject = function(opt_includeInstance) {
  return proto.codegen.TraverseSplat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.codegen.TraverseSplat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseSplat.toObject = function(includeInstance, msg) {
  var f, obj = {
    each: (f = msg.getEach()) && proto.codegen.Traversal.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.codegen.TraverseSplat}
 */
proto.codegen.TraverseSplat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.codegen.TraverseSplat;
  return proto.codegen.TraverseSplat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.codegen.TraverseSplat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.codegen.TraverseSplat}
 */
proto.codegen.TraverseSplat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.codegen.Traversal;
      reader.readMessage(value,proto.codegen.Traversal.deserializeBinaryFromReader);
      msg.setEach(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.codegen.TraverseSplat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.codegen.TraverseSplat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.codegen.TraverseSplat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.codegen.TraverseSplat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEach();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.codegen.Traversal.serializeBinaryToWriter
    );
  }
};


/**
 * optional Traversal each = 1;
 * @return {?proto.codegen.Traversal}
 */
proto.codegen.TraverseSplat.prototype.getEach = function() {
  return /** @type{?proto.codegen.Traversal} */ (
    jspb.Message.getWrapperField(this, proto.codegen.Traversal, 1));
};


/**
 * @param {?proto.codegen.Traversal|undefined} value
 * @return {!proto.codegen.TraverseSplat} returns this
*/
proto.codegen.TraverseSplat.prototype.setEach = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.codegen.TraverseSplat} returns this
 */
proto.codegen.TraverseSplat.prototype.clearEach = function() {
  return this.setEach(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.codegen.TraverseSplat.prototype.hasEach = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.codegen.ConfigType = {
  STRING: 0,
  NUMBER: 1,
  INT: 2,
  BOOL: 3
};

/**
 * @enum {number}
 */
proto.codegen.Operation = {
  ADD: 0,
  DIVIDE: 1,
  EQUAL: 2,
  GREATER_THAN: 3,
  GREATER_THAN_OR_EQUAL: 4,
  LESS_THAN: 5,
  LESS_THAN_OR_EQUAL: 6,
  LOGICAL_AND: 7,
  LOGICAL_OR: 8,
  MODULO: 9,
  MULTIPLY: 10,
  NOT_EQUAL: 11,
  SUBTRACT: 12
};

goog.object.extend(exports, proto.codegen);
