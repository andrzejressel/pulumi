// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: pulumi/codegen/pcl.proto

package codegen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigType int32

const (
	ConfigType_STRING ConfigType = 0
	ConfigType_NUMBER ConfigType = 1
	ConfigType_INT    ConfigType = 2
	ConfigType_BOOL   ConfigType = 3
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0: "STRING",
		1: "NUMBER",
		2: "INT",
		3: "BOOL",
	}
	ConfigType_value = map[string]int32{
		"STRING": 0,
		"NUMBER": 1,
		"INT":    2,
		"BOOL":   3,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_pulumi_codegen_pcl_proto_enumTypes[0].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_pulumi_codegen_pcl_proto_enumTypes[0]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{0}
}

type Operation int32

const (
	Operation_ADD                   Operation = 0
	Operation_DIVIDE                Operation = 1
	Operation_EQUAL                 Operation = 2
	Operation_GREATER_THAN          Operation = 3
	Operation_GREATER_THAN_OR_EQUAL Operation = 4
	Operation_LESS_THAN             Operation = 5
	Operation_LESS_THAN_OR_EQUAL    Operation = 6
	Operation_LOGICAL_AND           Operation = 7
	Operation_LOGICAL_OR            Operation = 8
	Operation_MODULO                Operation = 9
	Operation_MULTIPLY              Operation = 10
	Operation_NOT_EQUAL             Operation = 11
	Operation_SUBTRACT              Operation = 12
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0:  "ADD",
		1:  "DIVIDE",
		2:  "EQUAL",
		3:  "GREATER_THAN",
		4:  "GREATER_THAN_OR_EQUAL",
		5:  "LESS_THAN",
		6:  "LESS_THAN_OR_EQUAL",
		7:  "LOGICAL_AND",
		8:  "LOGICAL_OR",
		9:  "MODULO",
		10: "MULTIPLY",
		11: "NOT_EQUAL",
		12: "SUBTRACT",
	}
	Operation_value = map[string]int32{
		"ADD":                   0,
		"DIVIDE":                1,
		"EQUAL":                 2,
		"GREATER_THAN":          3,
		"GREATER_THAN_OR_EQUAL": 4,
		"LESS_THAN":             5,
		"LESS_THAN_OR_EQUAL":    6,
		"LOGICAL_AND":           7,
		"LOGICAL_OR":            8,
		"MODULO":                9,
		"MULTIPLY":              10,
		"NOT_EQUAL":             11,
		"SUBTRACT":              12,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_pulumi_codegen_pcl_proto_enumTypes[1].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_pulumi_codegen_pcl_proto_enumTypes[1]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{1}
}

type PclProtobufProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes   []*Node            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Plugins []*PluginReference `protobuf:"bytes,2,rep,name=plugins,proto3" json:"plugins,omitempty"`
}

func (x *PclProtobufProgram) Reset() {
	*x = PclProtobufProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PclProtobufProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PclProtobufProgram) ProtoMessage() {}

func (x *PclProtobufProgram) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PclProtobufProgram.ProtoReflect.Descriptor instead.
func (*PclProtobufProgram) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{0}
}

func (x *PclProtobufProgram) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *PclProtobufProgram) GetPlugins() []*PluginReference {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type PluginReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PluginReference) Reset() {
	*x = PluginReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginReference) ProtoMessage() {}

func (x *PluginReference) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginReference.ProtoReflect.Descriptor instead.
func (*PluginReference) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{1}
}

func (x *PluginReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginReference) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Node_Resource
	//	*Node_LocalVariable
	//	*Node_ConfigVariable
	//	*Node_OutputVariable
	Value isNode_Value `protobuf_oneof:"value"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{2}
}

func (m *Node) GetValue() isNode_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Node) GetResource() *Resource {
	if x, ok := x.GetValue().(*Node_Resource); ok {
		return x.Resource
	}
	return nil
}

func (x *Node) GetLocalVariable() *LocalVariable {
	if x, ok := x.GetValue().(*Node_LocalVariable); ok {
		return x.LocalVariable
	}
	return nil
}

func (x *Node) GetConfigVariable() *ConfigVariable {
	if x, ok := x.GetValue().(*Node_ConfigVariable); ok {
		return x.ConfigVariable
	}
	return nil
}

func (x *Node) GetOutputVariable() *OutputVariable {
	if x, ok := x.GetValue().(*Node_OutputVariable); ok {
		return x.OutputVariable
	}
	return nil
}

type isNode_Value interface {
	isNode_Value()
}

type Node_Resource struct {
	Resource *Resource `protobuf:"bytes,1,opt,name=resource,proto3,oneof"`
}

type Node_LocalVariable struct {
	LocalVariable *LocalVariable `protobuf:"bytes,2,opt,name=localVariable,proto3,oneof"`
}

type Node_ConfigVariable struct {
	ConfigVariable *ConfigVariable `protobuf:"bytes,3,opt,name=configVariable,proto3,oneof"`
}

type Node_OutputVariable struct {
	OutputVariable *OutputVariable `protobuf:"bytes,4,opt,name=outputVariable,proto3,oneof"`
}

func (*Node_Resource) isNode_Value() {}

func (*Node_LocalVariable) isNode_Value() {}

func (*Node_ConfigVariable) isNode_Value() {}

func (*Node_OutputVariable) isNode_Value() {}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogicalName string           `protobuf:"bytes,2,opt,name=logicalName,proto3" json:"logicalName,omitempty"`
	Token       string           `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	Inputs      []*ResourceInput `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Options     *ResourceOptions `protobuf:"bytes,5,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{3}
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *Resource) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Resource) GetInputs() []*ResourceInput {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Resource) GetOptions() *ResourceOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ResourceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *Expression `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResourceInput) Reset() {
	*x = ResourceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInput) ProtoMessage() {}

func (x *ResourceInput) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInput.ProtoReflect.Descriptor instead.
func (*ResourceInput) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceInput) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResourceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependsOn     *Expression `protobuf:"bytes,1,opt,name=dependsOn,proto3,oneof" json:"dependsOn,omitempty"`
	Protect       *Expression `protobuf:"bytes,2,opt,name=protect,proto3,oneof" json:"protect,omitempty"`
	Parent        *Expression `protobuf:"bytes,3,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	IgnoreChanges *Expression `protobuf:"bytes,4,opt,name=ignoreChanges,proto3,oneof" json:"ignoreChanges,omitempty"`
	Provider      *Expression `protobuf:"bytes,5,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	Version       *Expression `protobuf:"bytes,6,opt,name=version,proto3,oneof" json:"version,omitempty"`
}

func (x *ResourceOptions) Reset() {
	*x = ResourceOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceOptions) ProtoMessage() {}

func (x *ResourceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceOptions.ProtoReflect.Descriptor instead.
func (*ResourceOptions) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceOptions) GetDependsOn() *Expression {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *ResourceOptions) GetProtect() *Expression {
	if x != nil {
		return x.Protect
	}
	return nil
}

func (x *ResourceOptions) GetParent() *Expression {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ResourceOptions) GetIgnoreChanges() *Expression {
	if x != nil {
		return x.IgnoreChanges
	}
	return nil
}

func (x *ResourceOptions) GetProvider() *Expression {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ResourceOptions) GetVersion() *Expression {
	if x != nil {
		return x.Version
	}
	return nil
}

type LocalVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogicalName string      `protobuf:"bytes,2,opt,name=logicalName,proto3" json:"logicalName,omitempty"`
	Value       *Expression `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *LocalVariable) Reset() {
	*x = LocalVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalVariable) ProtoMessage() {}

func (x *LocalVariable) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalVariable.ProtoReflect.Descriptor instead.
func (*LocalVariable) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{6}
}

func (x *LocalVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalVariable) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *LocalVariable) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type ConfigVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogicalName  string      `protobuf:"bytes,2,opt,name=logicalName,proto3" json:"logicalName,omitempty"`
	ConfigType   ConfigType  `protobuf:"varint,3,opt,name=configType,proto3,enum=codegen.ConfigType" json:"configType,omitempty"`
	DefaultValue *Expression `protobuf:"bytes,4,opt,name=defaultValue,proto3" json:"defaultValue,omitempty"`
}

func (x *ConfigVariable) Reset() {
	*x = ConfigVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigVariable) ProtoMessage() {}

func (x *ConfigVariable) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigVariable.ProtoReflect.Descriptor instead.
func (*ConfigVariable) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigVariable) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *ConfigVariable) GetConfigType() ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return ConfigType_STRING
}

func (x *ConfigVariable) GetDefaultValue() *Expression {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

type OutputVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogicalName string      `protobuf:"bytes,2,opt,name=logicalName,proto3" json:"logicalName,omitempty"`
	Value       *Expression `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OutputVariable) Reset() {
	*x = OutputVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputVariable) ProtoMessage() {}

func (x *OutputVariable) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputVariable.ProtoReflect.Descriptor instead.
func (*OutputVariable) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{8}
}

func (x *OutputVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputVariable) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *OutputVariable) GetValue() *Expression {
	if x != nil {
		return x.Value
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Expression_LiteralValueExpression
	//	*Expression_TemplateExpression
	//	*Expression_IndexExpression
	//	*Expression_ObjectConsExpression
	//	*Expression_TupleConsExpression
	//	*Expression_FunctionCallExpression
	//	*Expression_RelativeTraversalExpression
	//	*Expression_ScopeTraversalExpression
	//	*Expression_AnonymousFunctionExpression
	//	*Expression_ConditionalExpression
	//	*Expression_BinaryOpExpression
	//	*Expression_UnaryOpExpression
	Value isExpression_Value `protobuf_oneof:"value"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{9}
}

func (m *Expression) GetValue() isExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Expression) GetLiteralValueExpression() *LiteralValueExpression {
	if x, ok := x.GetValue().(*Expression_LiteralValueExpression); ok {
		return x.LiteralValueExpression
	}
	return nil
}

func (x *Expression) GetTemplateExpression() *TemplateExpression {
	if x, ok := x.GetValue().(*Expression_TemplateExpression); ok {
		return x.TemplateExpression
	}
	return nil
}

func (x *Expression) GetIndexExpression() *IndexExpression {
	if x, ok := x.GetValue().(*Expression_IndexExpression); ok {
		return x.IndexExpression
	}
	return nil
}

func (x *Expression) GetObjectConsExpression() *ObjectConsExpression {
	if x, ok := x.GetValue().(*Expression_ObjectConsExpression); ok {
		return x.ObjectConsExpression
	}
	return nil
}

func (x *Expression) GetTupleConsExpression() *TupleConsExpression {
	if x, ok := x.GetValue().(*Expression_TupleConsExpression); ok {
		return x.TupleConsExpression
	}
	return nil
}

func (x *Expression) GetFunctionCallExpression() *FunctionCallExpression {
	if x, ok := x.GetValue().(*Expression_FunctionCallExpression); ok {
		return x.FunctionCallExpression
	}
	return nil
}

func (x *Expression) GetRelativeTraversalExpression() *RelativeTraversalExpression {
	if x, ok := x.GetValue().(*Expression_RelativeTraversalExpression); ok {
		return x.RelativeTraversalExpression
	}
	return nil
}

func (x *Expression) GetScopeTraversalExpression() *ScopeTraversalExpression {
	if x, ok := x.GetValue().(*Expression_ScopeTraversalExpression); ok {
		return x.ScopeTraversalExpression
	}
	return nil
}

func (x *Expression) GetAnonymousFunctionExpression() *AnonymousFunctionExpression {
	if x, ok := x.GetValue().(*Expression_AnonymousFunctionExpression); ok {
		return x.AnonymousFunctionExpression
	}
	return nil
}

func (x *Expression) GetConditionalExpression() *ConditionalExpression {
	if x, ok := x.GetValue().(*Expression_ConditionalExpression); ok {
		return x.ConditionalExpression
	}
	return nil
}

func (x *Expression) GetBinaryOpExpression() *BinaryOpExpression {
	if x, ok := x.GetValue().(*Expression_BinaryOpExpression); ok {
		return x.BinaryOpExpression
	}
	return nil
}

func (x *Expression) GetUnaryOpExpression() *UnaryOpExpression {
	if x, ok := x.GetValue().(*Expression_UnaryOpExpression); ok {
		return x.UnaryOpExpression
	}
	return nil
}

type isExpression_Value interface {
	isExpression_Value()
}

type Expression_LiteralValueExpression struct {
	LiteralValueExpression *LiteralValueExpression `protobuf:"bytes,1,opt,name=literalValueExpression,proto3,oneof"`
}

type Expression_TemplateExpression struct {
	TemplateExpression *TemplateExpression `protobuf:"bytes,2,opt,name=templateExpression,proto3,oneof"`
}

type Expression_IndexExpression struct {
	IndexExpression *IndexExpression `protobuf:"bytes,3,opt,name=indexExpression,proto3,oneof"`
}

type Expression_ObjectConsExpression struct {
	ObjectConsExpression *ObjectConsExpression `protobuf:"bytes,4,opt,name=objectConsExpression,proto3,oneof"`
}

type Expression_TupleConsExpression struct {
	TupleConsExpression *TupleConsExpression `protobuf:"bytes,5,opt,name=tupleConsExpression,proto3,oneof"`
}

type Expression_FunctionCallExpression struct {
	FunctionCallExpression *FunctionCallExpression `protobuf:"bytes,6,opt,name=functionCallExpression,proto3,oneof"`
}

type Expression_RelativeTraversalExpression struct {
	RelativeTraversalExpression *RelativeTraversalExpression `protobuf:"bytes,7,opt,name=relativeTraversalExpression,proto3,oneof"`
}

type Expression_ScopeTraversalExpression struct {
	ScopeTraversalExpression *ScopeTraversalExpression `protobuf:"bytes,8,opt,name=scopeTraversalExpression,proto3,oneof"`
}

type Expression_AnonymousFunctionExpression struct {
	AnonymousFunctionExpression *AnonymousFunctionExpression `protobuf:"bytes,9,opt,name=anonymousFunctionExpression,proto3,oneof"`
}

type Expression_ConditionalExpression struct {
	ConditionalExpression *ConditionalExpression `protobuf:"bytes,10,opt,name=conditionalExpression,proto3,oneof"`
}

type Expression_BinaryOpExpression struct {
	BinaryOpExpression *BinaryOpExpression `protobuf:"bytes,11,opt,name=binaryOpExpression,proto3,oneof"`
}

type Expression_UnaryOpExpression struct {
	UnaryOpExpression *UnaryOpExpression `protobuf:"bytes,12,opt,name=unaryOpExpression,proto3,oneof"`
}

func (*Expression_LiteralValueExpression) isExpression_Value() {}

func (*Expression_TemplateExpression) isExpression_Value() {}

func (*Expression_IndexExpression) isExpression_Value() {}

func (*Expression_ObjectConsExpression) isExpression_Value() {}

func (*Expression_TupleConsExpression) isExpression_Value() {}

func (*Expression_FunctionCallExpression) isExpression_Value() {}

func (*Expression_RelativeTraversalExpression) isExpression_Value() {}

func (*Expression_ScopeTraversalExpression) isExpression_Value() {}

func (*Expression_AnonymousFunctionExpression) isExpression_Value() {}

func (*Expression_ConditionalExpression) isExpression_Value() {}

func (*Expression_BinaryOpExpression) isExpression_Value() {}

func (*Expression_UnaryOpExpression) isExpression_Value() {}

type LiteralValueExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*LiteralValueExpression_UnknownValue
	//	*LiteralValueExpression_StringValue
	//	*LiteralValueExpression_NumberValue
	//	*LiteralValueExpression_BoolValue
	Value isLiteralValueExpression_Value `protobuf_oneof:"value"`
}

func (x *LiteralValueExpression) Reset() {
	*x = LiteralValueExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralValueExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralValueExpression) ProtoMessage() {}

func (x *LiteralValueExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralValueExpression.ProtoReflect.Descriptor instead.
func (*LiteralValueExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{10}
}

func (m *LiteralValueExpression) GetValue() isLiteralValueExpression_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *LiteralValueExpression) GetUnknownValue() bool {
	if x, ok := x.GetValue().(*LiteralValueExpression_UnknownValue); ok {
		return x.UnknownValue
	}
	return false
}

func (x *LiteralValueExpression) GetStringValue() string {
	if x, ok := x.GetValue().(*LiteralValueExpression_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *LiteralValueExpression) GetNumberValue() float64 {
	if x, ok := x.GetValue().(*LiteralValueExpression_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *LiteralValueExpression) GetBoolValue() bool {
	if x, ok := x.GetValue().(*LiteralValueExpression_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isLiteralValueExpression_Value interface {
	isLiteralValueExpression_Value()
}

type LiteralValueExpression_UnknownValue struct {
	UnknownValue bool `protobuf:"varint,1,opt,name=unknownValue,proto3,oneof"`
}

type LiteralValueExpression_StringValue struct {
	StringValue string `protobuf:"bytes,2,opt,name=stringValue,proto3,oneof"`
}

type LiteralValueExpression_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=numberValue,proto3,oneof"`
}

type LiteralValueExpression_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=boolValue,proto3,oneof"`
}

func (*LiteralValueExpression_UnknownValue) isLiteralValueExpression_Value() {}

func (*LiteralValueExpression_StringValue) isLiteralValueExpression_Value() {}

func (*LiteralValueExpression_NumberValue) isLiteralValueExpression_Value() {}

func (*LiteralValueExpression_BoolValue) isLiteralValueExpression_Value() {}

type TemplateExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*Expression `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *TemplateExpression) Reset() {
	*x = TemplateExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateExpression) ProtoMessage() {}

func (x *TemplateExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateExpression.ProtoReflect.Descriptor instead.
func (*TemplateExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{11}
}

func (x *TemplateExpression) GetParts() []*Expression {
	if x != nil {
		return x.Parts
	}
	return nil
}

type IndexExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Expression `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Key        *Expression `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IndexExpression) Reset() {
	*x = IndexExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexExpression) ProtoMessage() {}

func (x *IndexExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexExpression.ProtoReflect.Descriptor instead.
func (*IndexExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{12}
}

func (x *IndexExpression) GetCollection() *Expression {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *IndexExpression) GetKey() *Expression {
	if x != nil {
		return x.Key
	}
	return nil
}

type ObjectConsExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties map[string]*Expression `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectConsExpression) Reset() {
	*x = ObjectConsExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectConsExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectConsExpression) ProtoMessage() {}

func (x *ObjectConsExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectConsExpression.ProtoReflect.Descriptor instead.
func (*ObjectConsExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectConsExpression) GetProperties() map[string]*Expression {
	if x != nil {
		return x.Properties
	}
	return nil
}

type TupleConsExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Expression `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *TupleConsExpression) Reset() {
	*x = TupleConsExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleConsExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleConsExpression) ProtoMessage() {}

func (x *TupleConsExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleConsExpression.ProtoReflect.Descriptor instead.
func (*TupleConsExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{14}
}

func (x *TupleConsExpression) GetItems() []*Expression {
	if x != nil {
		return x.Items
	}
	return nil
}

type FunctionCallExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args []*Expression `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *FunctionCallExpression) Reset() {
	*x = FunctionCallExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallExpression) ProtoMessage() {}

func (x *FunctionCallExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallExpression.ProtoReflect.Descriptor instead.
func (*FunctionCallExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{15}
}

func (x *FunctionCallExpression) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCallExpression) GetArgs() []*Expression {
	if x != nil {
		return x.Args
	}
	return nil
}

type RelativeTraversalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *Expression `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Traversal *Traversal  `protobuf:"bytes,2,opt,name=traversal,proto3" json:"traversal,omitempty"`
}

func (x *RelativeTraversalExpression) Reset() {
	*x = RelativeTraversalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeTraversalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeTraversalExpression) ProtoMessage() {}

func (x *RelativeTraversalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeTraversalExpression.ProtoReflect.Descriptor instead.
func (*RelativeTraversalExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{16}
}

func (x *RelativeTraversalExpression) GetSource() *Expression {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RelativeTraversalExpression) GetTraversal() *Traversal {
	if x != nil {
		return x.Traversal
	}
	return nil
}

type ScopeTraversalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootName  string     `protobuf:"bytes,1,opt,name=rootName,proto3" json:"rootName,omitempty"`
	Traversal *Traversal `protobuf:"bytes,2,opt,name=traversal,proto3" json:"traversal,omitempty"`
}

func (x *ScopeTraversalExpression) Reset() {
	*x = ScopeTraversalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeTraversalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeTraversalExpression) ProtoMessage() {}

func (x *ScopeTraversalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeTraversalExpression.ProtoReflect.Descriptor instead.
func (*ScopeTraversalExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{17}
}

func (x *ScopeTraversalExpression) GetRootName() string {
	if x != nil {
		return x.RootName
	}
	return ""
}

func (x *ScopeTraversalExpression) GetTraversal() *Traversal {
	if x != nil {
		return x.Traversal
	}
	return nil
}

type AnonymousFunctionExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body       *Expression `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Parameters []string    `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *AnonymousFunctionExpression) Reset() {
	*x = AnonymousFunctionExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonymousFunctionExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonymousFunctionExpression) ProtoMessage() {}

func (x *AnonymousFunctionExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonymousFunctionExpression.ProtoReflect.Descriptor instead.
func (*AnonymousFunctionExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{18}
}

func (x *AnonymousFunctionExpression) GetBody() *Expression {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AnonymousFunctionExpression) GetParameters() []string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ConditionalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition *Expression `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	TrueExpr  *Expression `protobuf:"bytes,2,opt,name=trueExpr,proto3" json:"trueExpr,omitempty"`
	FalseExpr *Expression `protobuf:"bytes,3,opt,name=falseExpr,proto3" json:"falseExpr,omitempty"`
}

func (x *ConditionalExpression) Reset() {
	*x = ConditionalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalExpression) ProtoMessage() {}

func (x *ConditionalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalExpression.ProtoReflect.Descriptor instead.
func (*ConditionalExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{19}
}

func (x *ConditionalExpression) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionalExpression) GetTrueExpr() *Expression {
	if x != nil {
		return x.TrueExpr
	}
	return nil
}

func (x *ConditionalExpression) GetFalseExpr() *Expression {
	if x != nil {
		return x.FalseExpr
	}
	return nil
}

type BinaryOpExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation Operation   `protobuf:"varint,1,opt,name=operation,proto3,enum=codegen.Operation" json:"operation,omitempty"`
	Left      *Expression `protobuf:"bytes,2,opt,name=left,proto3" json:"left,omitempty"`
	Right     *Expression `protobuf:"bytes,3,opt,name=right,proto3" json:"right,omitempty"`
}

func (x *BinaryOpExpression) Reset() {
	*x = BinaryOpExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryOpExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOpExpression) ProtoMessage() {}

func (x *BinaryOpExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOpExpression.ProtoReflect.Descriptor instead.
func (*BinaryOpExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{20}
}

func (x *BinaryOpExpression) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_ADD
}

func (x *BinaryOpExpression) GetLeft() *Expression {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *BinaryOpExpression) GetRight() *Expression {
	if x != nil {
		return x.Right
	}
	return nil
}

type UnaryOpExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation Operation   `protobuf:"varint,1,opt,name=operation,proto3,enum=codegen.Operation" json:"operation,omitempty"`
	Operand   *Expression `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *UnaryOpExpression) Reset() {
	*x = UnaryOpExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOpExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOpExpression) ProtoMessage() {}

func (x *UnaryOpExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOpExpression.ProtoReflect.Descriptor instead.
func (*UnaryOpExpression) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{21}
}

func (x *UnaryOpExpression) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_ADD
}

func (x *UnaryOpExpression) GetOperand() *Expression {
	if x != nil {
		return x.Operand
	}
	return nil
}

type Traversal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Each []*Traverser `protobuf:"bytes,1,rep,name=each,proto3" json:"each,omitempty"`
}

func (x *Traversal) Reset() {
	*x = Traversal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traversal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traversal) ProtoMessage() {}

func (x *Traversal) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traversal.ProtoReflect.Descriptor instead.
func (*Traversal) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{22}
}

func (x *Traversal) GetEach() []*Traverser {
	if x != nil {
		return x.Each
	}
	return nil
}

type Traverser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*Traverser_TraverseAttr
	//	*Traverser_TraverseIndex
	//	*Traverser_TraverseRoot
	//	*Traverser_TraverseSplat
	Value isTraverser_Value `protobuf_oneof:"value"`
}

func (x *Traverser) Reset() {
	*x = Traverser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traverser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traverser) ProtoMessage() {}

func (x *Traverser) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traverser.ProtoReflect.Descriptor instead.
func (*Traverser) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{23}
}

func (m *Traverser) GetValue() isTraverser_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Traverser) GetTraverseAttr() *TraverseAttr {
	if x, ok := x.GetValue().(*Traverser_TraverseAttr); ok {
		return x.TraverseAttr
	}
	return nil
}

func (x *Traverser) GetTraverseIndex() *TraverseIndex {
	if x, ok := x.GetValue().(*Traverser_TraverseIndex); ok {
		return x.TraverseIndex
	}
	return nil
}

func (x *Traverser) GetTraverseRoot() *TraverseRoot {
	if x, ok := x.GetValue().(*Traverser_TraverseRoot); ok {
		return x.TraverseRoot
	}
	return nil
}

func (x *Traverser) GetTraverseSplat() *TraverseSplat {
	if x, ok := x.GetValue().(*Traverser_TraverseSplat); ok {
		return x.TraverseSplat
	}
	return nil
}

type isTraverser_Value interface {
	isTraverser_Value()
}

type Traverser_TraverseAttr struct {
	TraverseAttr *TraverseAttr `protobuf:"bytes,1,opt,name=traverseAttr,proto3,oneof"`
}

type Traverser_TraverseIndex struct {
	TraverseIndex *TraverseIndex `protobuf:"bytes,2,opt,name=traverseIndex,proto3,oneof"`
}

type Traverser_TraverseRoot struct {
	TraverseRoot *TraverseRoot `protobuf:"bytes,3,opt,name=traverseRoot,proto3,oneof"`
}

type Traverser_TraverseSplat struct {
	TraverseSplat *TraverseSplat `protobuf:"bytes,4,opt,name=traverseSplat,proto3,oneof"`
}

func (*Traverser_TraverseAttr) isTraverser_Value() {}

func (*Traverser_TraverseIndex) isTraverser_Value() {}

func (*Traverser_TraverseRoot) isTraverser_Value() {}

func (*Traverser_TraverseSplat) isTraverser_Value() {}

type TraverseAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraverseAttr) Reset() {
	*x = TraverseAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseAttr) ProtoMessage() {}

func (x *TraverseAttr) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseAttr.ProtoReflect.Descriptor instead.
func (*TraverseAttr) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{24}
}

func (x *TraverseAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TraverseIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*TraverseIndex_IntIndex
	//	*TraverseIndex_StringIndex
	Value isTraverseIndex_Value `protobuf_oneof:"value"`
}

func (x *TraverseIndex) Reset() {
	*x = TraverseIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseIndex) ProtoMessage() {}

func (x *TraverseIndex) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseIndex.ProtoReflect.Descriptor instead.
func (*TraverseIndex) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{25}
}

func (m *TraverseIndex) GetValue() isTraverseIndex_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *TraverseIndex) GetIntIndex() int64 {
	if x, ok := x.GetValue().(*TraverseIndex_IntIndex); ok {
		return x.IntIndex
	}
	return 0
}

func (x *TraverseIndex) GetStringIndex() string {
	if x, ok := x.GetValue().(*TraverseIndex_StringIndex); ok {
		return x.StringIndex
	}
	return ""
}

type isTraverseIndex_Value interface {
	isTraverseIndex_Value()
}

type TraverseIndex_IntIndex struct {
	IntIndex int64 `protobuf:"varint,1,opt,name=intIndex,proto3,oneof"`
}

type TraverseIndex_StringIndex struct {
	StringIndex string `protobuf:"bytes,2,opt,name=stringIndex,proto3,oneof"`
}

func (*TraverseIndex_IntIndex) isTraverseIndex_Value() {}

func (*TraverseIndex_StringIndex) isTraverseIndex_Value() {}

type TraverseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraverseRoot) Reset() {
	*x = TraverseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseRoot) ProtoMessage() {}

func (x *TraverseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseRoot.ProtoReflect.Descriptor instead.
func (*TraverseRoot) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{26}
}

func (x *TraverseRoot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TraverseSplat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Each *Traversal `protobuf:"bytes,1,opt,name=each,proto3" json:"each,omitempty"`
}

func (x *TraverseSplat) Reset() {
	*x = TraverseSplat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pulumi_codegen_pcl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseSplat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseSplat) ProtoMessage() {}

func (x *TraverseSplat) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_pcl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseSplat.ProtoReflect.Descriptor instead.
func (*TraverseSplat) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_pcl_proto_rawDescGZIP(), []int{27}
}

func (x *TraverseSplat) GetEach() *Traversal {
	if x != nil {
		return x.Each
	}
	return nil
}

var File_pulumi_codegen_pcl_proto protoreflect.FileDescriptor

var file_pulumi_codegen_pcl_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x64, 0x65,
	0x67, 0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x12, 0x50, 0x63, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x32,
	0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x0f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4e, 0x0a, 0x0d, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa9, 0x03, 0x0a, 0x0f, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36,
	0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x73, 0x4f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65,
	0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x0d, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x04, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x73, 0x4f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x70, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x71, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xaf, 0x08, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x53, 0x0a, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x13, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x16, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a,
	0x18, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68,
	0x0a, 0x1b, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x12, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x11, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4f,
	0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x12, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f,
	0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xb9, 0x01, 0x0a, 0x14, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x52,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x40, 0x0a, 0x13, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x7c, 0x0a, 0x1b, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x09,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x22, 0x68, 0x0a, 0x18, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x1b, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x74, 0x72, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x22, 0x9a, 0x01, 0x0a,
	0x12, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x22, 0x74, 0x0a, 0x11, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22,
	0x33, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04,
	0x65, 0x61, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64,
	0x65, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x65, 0x61, 0x63, 0x68, 0x22, 0x8e, 0x02, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e,
	0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3e, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x61,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x67,
	0x65, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x52, 0x04, 0x65, 0x61,
	0x63, 0x68, 0x2a, 0x37, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x2a, 0xd7, 0x01, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x4f, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x50, 0x4c, 0x59, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x10, 0x0c, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d, 0x69, 0x2f, 0x70, 0x75, 0x6c, 0x75, 0x6d,
	0x69, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x67, 0x65, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pulumi_codegen_pcl_proto_rawDescOnce sync.Once
	file_pulumi_codegen_pcl_proto_rawDescData = file_pulumi_codegen_pcl_proto_rawDesc
)

func file_pulumi_codegen_pcl_proto_rawDescGZIP() []byte {
	file_pulumi_codegen_pcl_proto_rawDescOnce.Do(func() {
		file_pulumi_codegen_pcl_proto_rawDescData = protoimpl.X.CompressGZIP(file_pulumi_codegen_pcl_proto_rawDescData)
	})
	return file_pulumi_codegen_pcl_proto_rawDescData
}

var file_pulumi_codegen_pcl_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pulumi_codegen_pcl_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_pulumi_codegen_pcl_proto_goTypes = []interface{}{
	(ConfigType)(0),                     // 0: codegen.ConfigType
	(Operation)(0),                      // 1: codegen.Operation
	(*PclProtobufProgram)(nil),          // 2: codegen.PclProtobufProgram
	(*PluginReference)(nil),             // 3: codegen.PluginReference
	(*Node)(nil),                        // 4: codegen.Node
	(*Resource)(nil),                    // 5: codegen.Resource
	(*ResourceInput)(nil),               // 6: codegen.ResourceInput
	(*ResourceOptions)(nil),             // 7: codegen.ResourceOptions
	(*LocalVariable)(nil),               // 8: codegen.LocalVariable
	(*ConfigVariable)(nil),              // 9: codegen.ConfigVariable
	(*OutputVariable)(nil),              // 10: codegen.OutputVariable
	(*Expression)(nil),                  // 11: codegen.Expression
	(*LiteralValueExpression)(nil),      // 12: codegen.LiteralValueExpression
	(*TemplateExpression)(nil),          // 13: codegen.TemplateExpression
	(*IndexExpression)(nil),             // 14: codegen.IndexExpression
	(*ObjectConsExpression)(nil),        // 15: codegen.ObjectConsExpression
	(*TupleConsExpression)(nil),         // 16: codegen.TupleConsExpression
	(*FunctionCallExpression)(nil),      // 17: codegen.FunctionCallExpression
	(*RelativeTraversalExpression)(nil), // 18: codegen.RelativeTraversalExpression
	(*ScopeTraversalExpression)(nil),    // 19: codegen.ScopeTraversalExpression
	(*AnonymousFunctionExpression)(nil), // 20: codegen.AnonymousFunctionExpression
	(*ConditionalExpression)(nil),       // 21: codegen.ConditionalExpression
	(*BinaryOpExpression)(nil),          // 22: codegen.BinaryOpExpression
	(*UnaryOpExpression)(nil),           // 23: codegen.UnaryOpExpression
	(*Traversal)(nil),                   // 24: codegen.Traversal
	(*Traverser)(nil),                   // 25: codegen.Traverser
	(*TraverseAttr)(nil),                // 26: codegen.TraverseAttr
	(*TraverseIndex)(nil),               // 27: codegen.TraverseIndex
	(*TraverseRoot)(nil),                // 28: codegen.TraverseRoot
	(*TraverseSplat)(nil),               // 29: codegen.TraverseSplat
	nil,                                 // 30: codegen.ObjectConsExpression.PropertiesEntry
}
var file_pulumi_codegen_pcl_proto_depIdxs = []int32{
	4,  // 0: codegen.PclProtobufProgram.nodes:type_name -> codegen.Node
	3,  // 1: codegen.PclProtobufProgram.plugins:type_name -> codegen.PluginReference
	5,  // 2: codegen.Node.resource:type_name -> codegen.Resource
	8,  // 3: codegen.Node.localVariable:type_name -> codegen.LocalVariable
	9,  // 4: codegen.Node.configVariable:type_name -> codegen.ConfigVariable
	10, // 5: codegen.Node.outputVariable:type_name -> codegen.OutputVariable
	6,  // 6: codegen.Resource.inputs:type_name -> codegen.ResourceInput
	7,  // 7: codegen.Resource.options:type_name -> codegen.ResourceOptions
	11, // 8: codegen.ResourceInput.value:type_name -> codegen.Expression
	11, // 9: codegen.ResourceOptions.dependsOn:type_name -> codegen.Expression
	11, // 10: codegen.ResourceOptions.protect:type_name -> codegen.Expression
	11, // 11: codegen.ResourceOptions.parent:type_name -> codegen.Expression
	11, // 12: codegen.ResourceOptions.ignoreChanges:type_name -> codegen.Expression
	11, // 13: codegen.ResourceOptions.provider:type_name -> codegen.Expression
	11, // 14: codegen.ResourceOptions.version:type_name -> codegen.Expression
	11, // 15: codegen.LocalVariable.value:type_name -> codegen.Expression
	0,  // 16: codegen.ConfigVariable.configType:type_name -> codegen.ConfigType
	11, // 17: codegen.ConfigVariable.defaultValue:type_name -> codegen.Expression
	11, // 18: codegen.OutputVariable.value:type_name -> codegen.Expression
	12, // 19: codegen.Expression.literalValueExpression:type_name -> codegen.LiteralValueExpression
	13, // 20: codegen.Expression.templateExpression:type_name -> codegen.TemplateExpression
	14, // 21: codegen.Expression.indexExpression:type_name -> codegen.IndexExpression
	15, // 22: codegen.Expression.objectConsExpression:type_name -> codegen.ObjectConsExpression
	16, // 23: codegen.Expression.tupleConsExpression:type_name -> codegen.TupleConsExpression
	17, // 24: codegen.Expression.functionCallExpression:type_name -> codegen.FunctionCallExpression
	18, // 25: codegen.Expression.relativeTraversalExpression:type_name -> codegen.RelativeTraversalExpression
	19, // 26: codegen.Expression.scopeTraversalExpression:type_name -> codegen.ScopeTraversalExpression
	20, // 27: codegen.Expression.anonymousFunctionExpression:type_name -> codegen.AnonymousFunctionExpression
	21, // 28: codegen.Expression.conditionalExpression:type_name -> codegen.ConditionalExpression
	22, // 29: codegen.Expression.binaryOpExpression:type_name -> codegen.BinaryOpExpression
	23, // 30: codegen.Expression.unaryOpExpression:type_name -> codegen.UnaryOpExpression
	11, // 31: codegen.TemplateExpression.parts:type_name -> codegen.Expression
	11, // 32: codegen.IndexExpression.collection:type_name -> codegen.Expression
	11, // 33: codegen.IndexExpression.key:type_name -> codegen.Expression
	30, // 34: codegen.ObjectConsExpression.properties:type_name -> codegen.ObjectConsExpression.PropertiesEntry
	11, // 35: codegen.TupleConsExpression.items:type_name -> codegen.Expression
	11, // 36: codegen.FunctionCallExpression.args:type_name -> codegen.Expression
	11, // 37: codegen.RelativeTraversalExpression.source:type_name -> codegen.Expression
	24, // 38: codegen.RelativeTraversalExpression.traversal:type_name -> codegen.Traversal
	24, // 39: codegen.ScopeTraversalExpression.traversal:type_name -> codegen.Traversal
	11, // 40: codegen.AnonymousFunctionExpression.body:type_name -> codegen.Expression
	11, // 41: codegen.ConditionalExpression.condition:type_name -> codegen.Expression
	11, // 42: codegen.ConditionalExpression.trueExpr:type_name -> codegen.Expression
	11, // 43: codegen.ConditionalExpression.falseExpr:type_name -> codegen.Expression
	1,  // 44: codegen.BinaryOpExpression.operation:type_name -> codegen.Operation
	11, // 45: codegen.BinaryOpExpression.left:type_name -> codegen.Expression
	11, // 46: codegen.BinaryOpExpression.right:type_name -> codegen.Expression
	1,  // 47: codegen.UnaryOpExpression.operation:type_name -> codegen.Operation
	11, // 48: codegen.UnaryOpExpression.operand:type_name -> codegen.Expression
	25, // 49: codegen.Traversal.each:type_name -> codegen.Traverser
	26, // 50: codegen.Traverser.traverseAttr:type_name -> codegen.TraverseAttr
	27, // 51: codegen.Traverser.traverseIndex:type_name -> codegen.TraverseIndex
	28, // 52: codegen.Traverser.traverseRoot:type_name -> codegen.TraverseRoot
	29, // 53: codegen.Traverser.traverseSplat:type_name -> codegen.TraverseSplat
	24, // 54: codegen.TraverseSplat.each:type_name -> codegen.Traversal
	11, // 55: codegen.ObjectConsExpression.PropertiesEntry.value:type_name -> codegen.Expression
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_pulumi_codegen_pcl_proto_init() }
func file_pulumi_codegen_pcl_proto_init() {
	if File_pulumi_codegen_pcl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pulumi_codegen_pcl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PclProtobufProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralValueExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectConsExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleConsExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeTraversalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeTraversalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonymousFunctionExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryOpExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOpExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traversal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traverser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pulumi_codegen_pcl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseSplat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pulumi_codegen_pcl_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Node_Resource)(nil),
		(*Node_LocalVariable)(nil),
		(*Node_ConfigVariable)(nil),
		(*Node_OutputVariable)(nil),
	}
	file_pulumi_codegen_pcl_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_pulumi_codegen_pcl_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pulumi_codegen_pcl_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Expression_LiteralValueExpression)(nil),
		(*Expression_TemplateExpression)(nil),
		(*Expression_IndexExpression)(nil),
		(*Expression_ObjectConsExpression)(nil),
		(*Expression_TupleConsExpression)(nil),
		(*Expression_FunctionCallExpression)(nil),
		(*Expression_RelativeTraversalExpression)(nil),
		(*Expression_ScopeTraversalExpression)(nil),
		(*Expression_AnonymousFunctionExpression)(nil),
		(*Expression_ConditionalExpression)(nil),
		(*Expression_BinaryOpExpression)(nil),
		(*Expression_UnaryOpExpression)(nil),
	}
	file_pulumi_codegen_pcl_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*LiteralValueExpression_UnknownValue)(nil),
		(*LiteralValueExpression_StringValue)(nil),
		(*LiteralValueExpression_NumberValue)(nil),
		(*LiteralValueExpression_BoolValue)(nil),
	}
	file_pulumi_codegen_pcl_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Traverser_TraverseAttr)(nil),
		(*Traverser_TraverseIndex)(nil),
		(*Traverser_TraverseRoot)(nil),
		(*Traverser_TraverseSplat)(nil),
	}
	file_pulumi_codegen_pcl_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TraverseIndex_IntIndex)(nil),
		(*TraverseIndex_StringIndex)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pulumi_codegen_pcl_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pulumi_codegen_pcl_proto_goTypes,
		DependencyIndexes: file_pulumi_codegen_pcl_proto_depIdxs,
		EnumInfos:         file_pulumi_codegen_pcl_proto_enumTypes,
		MessageInfos:      file_pulumi_codegen_pcl_proto_msgTypes,
	}.Build()
	File_pulumi_codegen_pcl_proto = out.File
	file_pulumi_codegen_pcl_proto_rawDesc = nil
	file_pulumi_codegen_pcl_proto_goTypes = nil
	file_pulumi_codegen_pcl_proto_depIdxs = nil
}
